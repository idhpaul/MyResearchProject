// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FileExchange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FileExchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FileExchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FileExchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FileExchange_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FileExchange_2eproto;
namespace FileExchange {
class DownloadRequest;
class DownloadRequestDefaultTypeInternal;
extern DownloadRequestDefaultTypeInternal _DownloadRequest_default_instance_;
class DownloadResponse;
class DownloadResponseDefaultTypeInternal;
extern DownloadResponseDefaultTypeInternal _DownloadResponse_default_instance_;
class FileChunk;
class FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class FileHeader;
class FileHeaderDefaultTypeInternal;
extern FileHeaderDefaultTypeInternal _FileHeader_default_instance_;
class UploadRequest;
class UploadRequestDefaultTypeInternal;
extern UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
class UploadResponse;
class UploadResponseDefaultTypeInternal;
extern UploadResponseDefaultTypeInternal _UploadResponse_default_instance_;
}  // namespace FileExchange
PROTOBUF_NAMESPACE_OPEN
template<> ::FileExchange::DownloadRequest* Arena::CreateMaybeMessage<::FileExchange::DownloadRequest>(Arena*);
template<> ::FileExchange::DownloadResponse* Arena::CreateMaybeMessage<::FileExchange::DownloadResponse>(Arena*);
template<> ::FileExchange::FileChunk* Arena::CreateMaybeMessage<::FileExchange::FileChunk>(Arena*);
template<> ::FileExchange::FileHeader* Arena::CreateMaybeMessage<::FileExchange::FileHeader>(Arena*);
template<> ::FileExchange::UploadRequest* Arena::CreateMaybeMessage<::FileExchange::UploadRequest>(Arena*);
template<> ::FileExchange::UploadResponse* Arena::CreateMaybeMessage<::FileExchange::UploadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FileExchange {

// ===================================================================

class FileHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileExchange.FileHeader) */ {
 public:
  inline FileHeader() : FileHeader(nullptr) {}
  virtual ~FileHeader();

  FileHeader(const FileHeader& from);
  FileHeader(FileHeader&& from) noexcept
    : FileHeader() {
    *this = ::std::move(from);
  }

  inline FileHeader& operator=(const FileHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileHeader& operator=(FileHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileHeader* internal_default_instance() {
    return reinterpret_cast<const FileHeader*>(
               &_FileHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileHeader& a, FileHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(FileHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileHeader* New() const final {
    return CreateMaybeMessage<FileHeader>(nullptr);
  }

  FileHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileHeader& from);
  void MergeFrom(const FileHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileExchange.FileHeader";
  }
  protected:
  explicit FileHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileExchange_2eproto);
    return ::descriptor_table_FileExchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FileExchange.FileHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileExchange_2eproto;
};
// -------------------------------------------------------------------

class FileChunk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileExchange.FileChunk) */ {
 public:
  inline FileChunk() : FileChunk(nullptr) {}
  virtual ~FileChunk();

  FileChunk(const FileChunk& from);
  FileChunk(FileChunk&& from) noexcept
    : FileChunk() {
    *this = ::std::move(from);
  }

  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
               &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileChunk& a, FileChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(FileChunk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileChunk* New() const final {
    return CreateMaybeMessage<FileChunk>(nullptr);
  }

  FileChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileChunk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileChunk& from);
  void MergeFrom(const FileChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileExchange.FileChunk";
  }
  protected:
  explicit FileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileExchange_2eproto);
    return ::descriptor_table_FileExchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:FileExchange.FileChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileExchange_2eproto;
};
// -------------------------------------------------------------------

class UploadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileExchange.UploadRequest) */ {
 public:
  inline UploadRequest() : UploadRequest(nullptr) {}
  virtual ~UploadRequest();

  UploadRequest(const UploadRequest& from);
  UploadRequest(UploadRequest&& from) noexcept
    : UploadRequest() {
    *this = ::std::move(from);
  }

  inline UploadRequest& operator=(const UploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadRequest& operator=(UploadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadRequest& default_instance();

  enum ContentsCase {
    kHeader = 1,
    kChunk = 2,
    CONTENTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadRequest* internal_default_instance() {
    return reinterpret_cast<const UploadRequest*>(
               &_UploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadRequest& a, UploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadRequest* New() const final {
    return CreateMaybeMessage<UploadRequest>(nullptr);
  }

  UploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadRequest& from);
  void MergeFrom(const UploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileExchange.UploadRequest";
  }
  protected:
  explicit UploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileExchange_2eproto);
    return ::descriptor_table_FileExchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // .FileExchange.FileHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::FileExchange::FileHeader& header() const;
  ::FileExchange::FileHeader* release_header();
  ::FileExchange::FileHeader* mutable_header();
  void set_allocated_header(::FileExchange::FileHeader* header);
  private:
  const ::FileExchange::FileHeader& _internal_header() const;
  ::FileExchange::FileHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::FileExchange::FileHeader* header);
  ::FileExchange::FileHeader* unsafe_arena_release_header();

  // .FileExchange.FileChunk chunk = 2;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const ::FileExchange::FileChunk& chunk() const;
  ::FileExchange::FileChunk* release_chunk();
  ::FileExchange::FileChunk* mutable_chunk();
  void set_allocated_chunk(::FileExchange::FileChunk* chunk);
  private:
  const ::FileExchange::FileChunk& _internal_chunk() const;
  ::FileExchange::FileChunk* _internal_mutable_chunk();
  public:
  void unsafe_arena_set_allocated_chunk(
      ::FileExchange::FileChunk* chunk);
  ::FileExchange::FileChunk* unsafe_arena_release_chunk();

  void clear_contents();
  ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:FileExchange.UploadRequest)
 private:
  class _Internal;
  void set_has_header();
  void set_has_chunk();

  inline bool has_contents() const;
  inline void clear_has_contents();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentsUnion {
    ContentsUnion() {}
    ::FileExchange::FileHeader* header_;
    ::FileExchange::FileChunk* chunk_;
  } contents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_FileExchange_2eproto;
};
// -------------------------------------------------------------------

class UploadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileExchange.UploadResponse) */ {
 public:
  inline UploadResponse() : UploadResponse(nullptr) {}
  virtual ~UploadResponse();

  UploadResponse(const UploadResponse& from);
  UploadResponse(UploadResponse&& from) noexcept
    : UploadResponse() {
    *this = ::std::move(from);
  }

  inline UploadResponse& operator=(const UploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadResponse& operator=(UploadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadResponse* internal_default_instance() {
    return reinterpret_cast<const UploadResponse*>(
               &_UploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UploadResponse& a, UploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadResponse* New() const final {
    return CreateMaybeMessage<UploadResponse>(nullptr);
  }

  UploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadResponse& from);
  void MergeFrom(const UploadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileExchange.UploadResponse";
  }
  protected:
  explicit UploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileExchange_2eproto);
    return ::descriptor_table_FileExchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesReceivedFieldNumber = 1,
  };
  // uint64 bytesReceived = 1;
  void clear_bytesreceived();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytesreceived() const;
  void set_bytesreceived(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bytesreceived() const;
  void _internal_set_bytesreceived(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FileExchange.UploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytesreceived_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileExchange_2eproto;
};
// -------------------------------------------------------------------

class DownloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileExchange.DownloadRequest) */ {
 public:
  inline DownloadRequest() : DownloadRequest(nullptr) {}
  virtual ~DownloadRequest();

  DownloadRequest(const DownloadRequest& from);
  DownloadRequest(DownloadRequest&& from) noexcept
    : DownloadRequest() {
    *this = ::std::move(from);
  }

  inline DownloadRequest& operator=(const DownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadRequest& operator=(DownloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadRequest*>(
               &_DownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DownloadRequest& a, DownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadRequest* New() const final {
    return CreateMaybeMessage<DownloadRequest>(nullptr);
  }

  DownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadRequest& from);
  void MergeFrom(const DownloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileExchange.DownloadRequest";
  }
  protected:
  explicit DownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileExchange_2eproto);
    return ::descriptor_table_FileExchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kChunkSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 chunkSize = 2;
  void clear_chunksize();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunksize() const;
  void set_chunksize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chunksize() const;
  void _internal_set_chunksize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:FileExchange.DownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunksize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FileExchange_2eproto;
};
// -------------------------------------------------------------------

class DownloadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FileExchange.DownloadResponse) */ {
 public:
  inline DownloadResponse() : DownloadResponse(nullptr) {}
  virtual ~DownloadResponse();

  DownloadResponse(const DownloadResponse& from);
  DownloadResponse(DownloadResponse&& from) noexcept
    : DownloadResponse() {
    *this = ::std::move(from);
  }

  inline DownloadResponse& operator=(const DownloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadResponse& operator=(DownloadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadResponse& default_instance();

  enum ContentsCase {
    kHeader = 1,
    kChunk = 2,
    CONTENTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadResponse*>(
               &_DownloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DownloadResponse& a, DownloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadResponse* New() const final {
    return CreateMaybeMessage<DownloadResponse>(nullptr);
  }

  DownloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadResponse& from);
  void MergeFrom(const DownloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FileExchange.DownloadResponse";
  }
  protected:
  explicit DownloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FileExchange_2eproto);
    return ::descriptor_table_FileExchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // .FileExchange.FileHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::FileExchange::FileHeader& header() const;
  ::FileExchange::FileHeader* release_header();
  ::FileExchange::FileHeader* mutable_header();
  void set_allocated_header(::FileExchange::FileHeader* header);
  private:
  const ::FileExchange::FileHeader& _internal_header() const;
  ::FileExchange::FileHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::FileExchange::FileHeader* header);
  ::FileExchange::FileHeader* unsafe_arena_release_header();

  // .FileExchange.FileChunk chunk = 2;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const ::FileExchange::FileChunk& chunk() const;
  ::FileExchange::FileChunk* release_chunk();
  ::FileExchange::FileChunk* mutable_chunk();
  void set_allocated_chunk(::FileExchange::FileChunk* chunk);
  private:
  const ::FileExchange::FileChunk& _internal_chunk() const;
  ::FileExchange::FileChunk* _internal_mutable_chunk();
  public:
  void unsafe_arena_set_allocated_chunk(
      ::FileExchange::FileChunk* chunk);
  ::FileExchange::FileChunk* unsafe_arena_release_chunk();

  void clear_contents();
  ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:FileExchange.DownloadResponse)
 private:
  class _Internal;
  void set_has_header();
  void set_has_chunk();

  inline bool has_contents() const;
  inline void clear_has_contents();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ContentsUnion {
    ContentsUnion() {}
    ::FileExchange::FileHeader* header_;
    ::FileExchange::FileChunk* chunk_;
  } contents_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_FileExchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileHeader

// string name = 1;
inline void FileHeader::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileHeader::name() const {
  // @@protoc_insertion_point(field_get:FileExchange.FileHeader.name)
  return _internal_name();
}
inline void FileHeader::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:FileExchange.FileHeader.name)
}
inline std::string* FileHeader::mutable_name() {
  // @@protoc_insertion_point(field_mutable:FileExchange.FileHeader.name)
  return _internal_mutable_name();
}
inline const std::string& FileHeader::_internal_name() const {
  return name_.Get();
}
inline void FileHeader::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileHeader::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileExchange.FileHeader.name)
}
inline void FileHeader::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileExchange.FileHeader.name)
}
inline void FileHeader::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileExchange.FileHeader.name)
}
inline std::string* FileHeader::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileHeader::release_name() {
  // @@protoc_insertion_point(field_release:FileExchange.FileHeader.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileHeader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileExchange.FileHeader.name)
}

// uint64 size = 2;
inline void FileHeader::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileHeader::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FileHeader::size() const {
  // @@protoc_insertion_point(field_get:FileExchange.FileHeader.size)
  return _internal_size();
}
inline void FileHeader::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void FileHeader::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:FileExchange.FileHeader.size)
}

// -------------------------------------------------------------------

// FileChunk

// bytes data = 1;
inline void FileChunk::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FileChunk::data() const {
  // @@protoc_insertion_point(field_get:FileExchange.FileChunk.data)
  return _internal_data();
}
inline void FileChunk::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:FileExchange.FileChunk.data)
}
inline std::string* FileChunk::mutable_data() {
  // @@protoc_insertion_point(field_mutable:FileExchange.FileChunk.data)
  return _internal_mutable_data();
}
inline const std::string& FileChunk::_internal_data() const {
  return data_.Get();
}
inline void FileChunk::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FileChunk::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileExchange.FileChunk.data)
}
inline void FileChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileExchange.FileChunk.data)
}
inline void FileChunk::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileExchange.FileChunk.data)
}
inline std::string* FileChunk::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FileChunk::release_data() {
  // @@protoc_insertion_point(field_release:FileExchange.FileChunk.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileExchange.FileChunk.data)
}

// -------------------------------------------------------------------

// UploadRequest

// .FileExchange.FileHeader header = 1;
inline bool UploadRequest::_internal_has_header() const {
  return contents_case() == kHeader;
}
inline bool UploadRequest::has_header() const {
  return _internal_has_header();
}
inline void UploadRequest::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void UploadRequest::clear_header() {
  if (_internal_has_header()) {
    if (GetArena() == nullptr) {
      delete contents_.header_;
    }
    clear_has_contents();
  }
}
inline ::FileExchange::FileHeader* UploadRequest::release_header() {
  // @@protoc_insertion_point(field_release:FileExchange.UploadRequest.header)
  if (_internal_has_header()) {
    clear_has_contents();
      ::FileExchange::FileHeader* temp = contents_.header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FileExchange::FileHeader& UploadRequest::_internal_header() const {
  return _internal_has_header()
      ? *contents_.header_
      : *reinterpret_cast< ::FileExchange::FileHeader*>(&::FileExchange::_FileHeader_default_instance_);
}
inline const ::FileExchange::FileHeader& UploadRequest::header() const {
  // @@protoc_insertion_point(field_get:FileExchange.UploadRequest.header)
  return _internal_header();
}
inline ::FileExchange::FileHeader* UploadRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileExchange.UploadRequest.header)
  if (_internal_has_header()) {
    clear_has_contents();
    ::FileExchange::FileHeader* temp = contents_.header_;
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UploadRequest::unsafe_arena_set_allocated_header(::FileExchange::FileHeader* header) {
  clear_contents();
  if (header) {
    set_has_header();
    contents_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileExchange.UploadRequest.header)
}
inline ::FileExchange::FileHeader* UploadRequest::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_contents();
    set_has_header();
    contents_.header_ = CreateMaybeMessage< ::FileExchange::FileHeader >(GetArena());
  }
  return contents_.header_;
}
inline ::FileExchange::FileHeader* UploadRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:FileExchange.UploadRequest.header)
  return _internal_mutable_header();
}

// .FileExchange.FileChunk chunk = 2;
inline bool UploadRequest::_internal_has_chunk() const {
  return contents_case() == kChunk;
}
inline bool UploadRequest::has_chunk() const {
  return _internal_has_chunk();
}
inline void UploadRequest::set_has_chunk() {
  _oneof_case_[0] = kChunk;
}
inline void UploadRequest::clear_chunk() {
  if (_internal_has_chunk()) {
    if (GetArena() == nullptr) {
      delete contents_.chunk_;
    }
    clear_has_contents();
  }
}
inline ::FileExchange::FileChunk* UploadRequest::release_chunk() {
  // @@protoc_insertion_point(field_release:FileExchange.UploadRequest.chunk)
  if (_internal_has_chunk()) {
    clear_has_contents();
      ::FileExchange::FileChunk* temp = contents_.chunk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FileExchange::FileChunk& UploadRequest::_internal_chunk() const {
  return _internal_has_chunk()
      ? *contents_.chunk_
      : *reinterpret_cast< ::FileExchange::FileChunk*>(&::FileExchange::_FileChunk_default_instance_);
}
inline const ::FileExchange::FileChunk& UploadRequest::chunk() const {
  // @@protoc_insertion_point(field_get:FileExchange.UploadRequest.chunk)
  return _internal_chunk();
}
inline ::FileExchange::FileChunk* UploadRequest::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileExchange.UploadRequest.chunk)
  if (_internal_has_chunk()) {
    clear_has_contents();
    ::FileExchange::FileChunk* temp = contents_.chunk_;
    contents_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UploadRequest::unsafe_arena_set_allocated_chunk(::FileExchange::FileChunk* chunk) {
  clear_contents();
  if (chunk) {
    set_has_chunk();
    contents_.chunk_ = chunk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileExchange.UploadRequest.chunk)
}
inline ::FileExchange::FileChunk* UploadRequest::_internal_mutable_chunk() {
  if (!_internal_has_chunk()) {
    clear_contents();
    set_has_chunk();
    contents_.chunk_ = CreateMaybeMessage< ::FileExchange::FileChunk >(GetArena());
  }
  return contents_.chunk_;
}
inline ::FileExchange::FileChunk* UploadRequest::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable:FileExchange.UploadRequest.chunk)
  return _internal_mutable_chunk();
}

inline bool UploadRequest::has_contents() const {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void UploadRequest::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline UploadRequest::ContentsCase UploadRequest::contents_case() const {
  return UploadRequest::ContentsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UploadResponse

// uint64 bytesReceived = 1;
inline void UploadResponse::clear_bytesreceived() {
  bytesreceived_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UploadResponse::_internal_bytesreceived() const {
  return bytesreceived_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UploadResponse::bytesreceived() const {
  // @@protoc_insertion_point(field_get:FileExchange.UploadResponse.bytesReceived)
  return _internal_bytesreceived();
}
inline void UploadResponse::_internal_set_bytesreceived(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bytesreceived_ = value;
}
inline void UploadResponse::set_bytesreceived(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bytesreceived(value);
  // @@protoc_insertion_point(field_set:FileExchange.UploadResponse.bytesReceived)
}

// -------------------------------------------------------------------

// DownloadRequest

// string name = 1;
inline void DownloadRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownloadRequest::name() const {
  // @@protoc_insertion_point(field_get:FileExchange.DownloadRequest.name)
  return _internal_name();
}
inline void DownloadRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:FileExchange.DownloadRequest.name)
}
inline std::string* DownloadRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:FileExchange.DownloadRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DownloadRequest::_internal_name() const {
  return name_.Get();
}
inline void DownloadRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownloadRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FileExchange.DownloadRequest.name)
}
inline void DownloadRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FileExchange.DownloadRequest.name)
}
inline void DownloadRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FileExchange.DownloadRequest.name)
}
inline std::string* DownloadRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownloadRequest::release_name() {
  // @@protoc_insertion_point(field_release:FileExchange.DownloadRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownloadRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FileExchange.DownloadRequest.name)
}

// uint64 chunkSize = 2;
inline void DownloadRequest::clear_chunksize() {
  chunksize_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DownloadRequest::_internal_chunksize() const {
  return chunksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DownloadRequest::chunksize() const {
  // @@protoc_insertion_point(field_get:FileExchange.DownloadRequest.chunkSize)
  return _internal_chunksize();
}
inline void DownloadRequest::_internal_set_chunksize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chunksize_ = value;
}
inline void DownloadRequest::set_chunksize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chunksize(value);
  // @@protoc_insertion_point(field_set:FileExchange.DownloadRequest.chunkSize)
}

// -------------------------------------------------------------------

// DownloadResponse

// .FileExchange.FileHeader header = 1;
inline bool DownloadResponse::_internal_has_header() const {
  return contents_case() == kHeader;
}
inline bool DownloadResponse::has_header() const {
  return _internal_has_header();
}
inline void DownloadResponse::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void DownloadResponse::clear_header() {
  if (_internal_has_header()) {
    if (GetArena() == nullptr) {
      delete contents_.header_;
    }
    clear_has_contents();
  }
}
inline ::FileExchange::FileHeader* DownloadResponse::release_header() {
  // @@protoc_insertion_point(field_release:FileExchange.DownloadResponse.header)
  if (_internal_has_header()) {
    clear_has_contents();
      ::FileExchange::FileHeader* temp = contents_.header_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FileExchange::FileHeader& DownloadResponse::_internal_header() const {
  return _internal_has_header()
      ? *contents_.header_
      : *reinterpret_cast< ::FileExchange::FileHeader*>(&::FileExchange::_FileHeader_default_instance_);
}
inline const ::FileExchange::FileHeader& DownloadResponse::header() const {
  // @@protoc_insertion_point(field_get:FileExchange.DownloadResponse.header)
  return _internal_header();
}
inline ::FileExchange::FileHeader* DownloadResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileExchange.DownloadResponse.header)
  if (_internal_has_header()) {
    clear_has_contents();
    ::FileExchange::FileHeader* temp = contents_.header_;
    contents_.header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DownloadResponse::unsafe_arena_set_allocated_header(::FileExchange::FileHeader* header) {
  clear_contents();
  if (header) {
    set_has_header();
    contents_.header_ = header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileExchange.DownloadResponse.header)
}
inline ::FileExchange::FileHeader* DownloadResponse::_internal_mutable_header() {
  if (!_internal_has_header()) {
    clear_contents();
    set_has_header();
    contents_.header_ = CreateMaybeMessage< ::FileExchange::FileHeader >(GetArena());
  }
  return contents_.header_;
}
inline ::FileExchange::FileHeader* DownloadResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:FileExchange.DownloadResponse.header)
  return _internal_mutable_header();
}

// .FileExchange.FileChunk chunk = 2;
inline bool DownloadResponse::_internal_has_chunk() const {
  return contents_case() == kChunk;
}
inline bool DownloadResponse::has_chunk() const {
  return _internal_has_chunk();
}
inline void DownloadResponse::set_has_chunk() {
  _oneof_case_[0] = kChunk;
}
inline void DownloadResponse::clear_chunk() {
  if (_internal_has_chunk()) {
    if (GetArena() == nullptr) {
      delete contents_.chunk_;
    }
    clear_has_contents();
  }
}
inline ::FileExchange::FileChunk* DownloadResponse::release_chunk() {
  // @@protoc_insertion_point(field_release:FileExchange.DownloadResponse.chunk)
  if (_internal_has_chunk()) {
    clear_has_contents();
      ::FileExchange::FileChunk* temp = contents_.chunk_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    contents_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::FileExchange::FileChunk& DownloadResponse::_internal_chunk() const {
  return _internal_has_chunk()
      ? *contents_.chunk_
      : *reinterpret_cast< ::FileExchange::FileChunk*>(&::FileExchange::_FileChunk_default_instance_);
}
inline const ::FileExchange::FileChunk& DownloadResponse::chunk() const {
  // @@protoc_insertion_point(field_get:FileExchange.DownloadResponse.chunk)
  return _internal_chunk();
}
inline ::FileExchange::FileChunk* DownloadResponse::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FileExchange.DownloadResponse.chunk)
  if (_internal_has_chunk()) {
    clear_has_contents();
    ::FileExchange::FileChunk* temp = contents_.chunk_;
    contents_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DownloadResponse::unsafe_arena_set_allocated_chunk(::FileExchange::FileChunk* chunk) {
  clear_contents();
  if (chunk) {
    set_has_chunk();
    contents_.chunk_ = chunk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FileExchange.DownloadResponse.chunk)
}
inline ::FileExchange::FileChunk* DownloadResponse::_internal_mutable_chunk() {
  if (!_internal_has_chunk()) {
    clear_contents();
    set_has_chunk();
    contents_.chunk_ = CreateMaybeMessage< ::FileExchange::FileChunk >(GetArena());
  }
  return contents_.chunk_;
}
inline ::FileExchange::FileChunk* DownloadResponse::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable:FileExchange.DownloadResponse.chunk)
  return _internal_mutable_chunk();
}

inline bool DownloadResponse::has_contents() const {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void DownloadResponse::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline DownloadResponse::ContentsCase DownloadResponse::contents_case() const {
  return DownloadResponse::ContentsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FileExchange

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FileExchange_2eproto
