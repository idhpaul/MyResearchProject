// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyInjector.proto

#include "MyInjector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace hid {
class MouseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MouseRequest> _instance;
} _MouseRequest_default_instance_;
class MouseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MouseResponse> _instance;
} _MouseResponse_default_instance_;
class KeyboardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyboardRequest> _instance;
} _KeyboardRequest_default_instance_;
class KeyboardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyboardResponse> _instance;
} _KeyboardResponse_default_instance_;
class ClipboardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClipboardRequest> _instance;
} _ClipboardRequest_default_instance_;
class ClipboardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClipboardResponse> _instance;
} _ClipboardResponse_default_instance_;
}  // namespace hid
static void InitDefaultsscc_info_ClipboardRequest_MyInjector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hid::_ClipboardRequest_default_instance_;
    new (ptr) ::hid::ClipboardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hid::ClipboardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClipboardRequest_MyInjector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClipboardRequest_MyInjector_2eproto}, {}};

static void InitDefaultsscc_info_ClipboardResponse_MyInjector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hid::_ClipboardResponse_default_instance_;
    new (ptr) ::hid::ClipboardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hid::ClipboardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClipboardResponse_MyInjector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClipboardResponse_MyInjector_2eproto}, {}};

static void InitDefaultsscc_info_KeyboardRequest_MyInjector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hid::_KeyboardRequest_default_instance_;
    new (ptr) ::hid::KeyboardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hid::KeyboardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyboardRequest_MyInjector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyboardRequest_MyInjector_2eproto}, {}};

static void InitDefaultsscc_info_KeyboardResponse_MyInjector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hid::_KeyboardResponse_default_instance_;
    new (ptr) ::hid::KeyboardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hid::KeyboardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyboardResponse_MyInjector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyboardResponse_MyInjector_2eproto}, {}};

static void InitDefaultsscc_info_MouseRequest_MyInjector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hid::_MouseRequest_default_instance_;
    new (ptr) ::hid::MouseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hid::MouseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseRequest_MyInjector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MouseRequest_MyInjector_2eproto}, {}};

static void InitDefaultsscc_info_MouseResponse_MyInjector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hid::_MouseResponse_default_instance_;
    new (ptr) ::hid::MouseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hid::MouseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseResponse_MyInjector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MouseResponse_MyInjector_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MyInjector_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_MyInjector_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MyInjector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MyInjector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hid::MouseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hid::MouseRequest, proceedtype_),
  PROTOBUF_FIELD_OFFSET(::hid::MouseRequest, buttontype_),
  PROTOBUF_FIELD_OFFSET(::hid::MouseRequest, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hid::MouseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hid::MouseResponse, issame_),
  PROTOBUF_FIELD_OFFSET(::hid::MouseResponse, width_),
  PROTOBUF_FIELD_OFFSET(::hid::MouseResponse, height_),
  PROTOBUF_FIELD_OFFSET(::hid::MouseResponse, xhotspot_),
  PROTOBUF_FIELD_OFFSET(::hid::MouseResponse, yhotspot_),
  PROTOBUF_FIELD_OFFSET(::hid::MouseResponse, cursorsize_),
  PROTOBUF_FIELD_OFFSET(::hid::MouseResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hid::KeyboardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hid::KeyboardRequest, keycode_),
  PROTOBUF_FIELD_OFFSET(::hid::KeyboardRequest, extend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hid::KeyboardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hid::KeyboardResponse, reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hid::ClipboardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hid::ClipboardRequest, clipboarddata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hid::ClipboardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hid::ClipboardResponse, reply_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::hid::MouseRequest)},
  { 8, -1, sizeof(::hid::MouseResponse)},
  { 20, -1, sizeof(::hid::KeyboardRequest)},
  { 27, -1, sizeof(::hid::KeyboardResponse)},
  { 33, -1, sizeof(::hid::ClipboardRequest)},
  { 39, -1, sizeof(::hid::ClipboardResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hid::_MouseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hid::_MouseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hid::_KeyboardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hid::_KeyboardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hid::_ClipboardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hid::_ClipboardResponse_default_instance_),
};

const char descriptor_table_protodef_MyInjector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020MyInjector.proto\022\003hid\"\367\001\n\014MouseRequest"
  "\0222\n\013proceedtype\030\001 \001(\0162\035.hid.MouseRequest"
  ".ProceedType\0220\n\nbuttontype\030\002 \001(\0162\034.hid.M"
  "ouseRequest.ButtonType\022\020\n\010location\030\003 \001(\022"
  "\"6\n\013ProceedType\022\n\n\006MOTION\020\000\022\010\n\004DOWN\020\001\022\006\n"
  "\002UP\020\002\022\t\n\005Wheel\020\003\"7\n\nButtonType\022\010\n\004LEFT\020\000"
  "\022\n\n\006MIDDLE\020\001\022\t\n\005RIGHT\020\002\022\010\n\004NONE\020\003\"\204\001\n\rMo"
  "useResponse\022\016\n\006isSame\030\001 \001(\010\022\r\n\005width\030\002 \001"
  "(\r\022\016\n\006height\030\003 \001(\r\022\020\n\010xHotspot\030\004 \001(\r\022\020\n\010"
  "yHotspot\030\005 \001(\r\022\022\n\ncursorsize\030\006 \001(\r\022\014\n\004da"
  "ta\030\007 \001(\014\"2\n\017KeyboardRequest\022\017\n\007keycode\030\001"
  " \001(\021\022\016\n\006extend\030\002 \001(\021\"!\n\020KeyboardResponse"
  "\022\r\n\005reply\030\001 \001(\t\")\n\020ClipboardRequest\022\025\n\rc"
  "lipboardData\030\001 \001(\t\"\"\n\021ClipboardResponse\022"
  "\r\n\005reply\030\001 \001(\t2\324\001\n\tInjection\022C\n\022PushKeyb"
  "oardInject\022\024.hid.KeyboardRequest\032\025.hid.K"
  "eyboardResponse\"\000\022:\n\017PushMouseInject\022\021.h"
  "id.MouseRequest\032\022.hid.MouseResponse\"\000\022F\n"
  "\023PushClipboardInject\022\025.hid.ClipboardRequ"
  "est\032\026.hid.ClipboardResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MyInjector_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MyInjector_2eproto_sccs[6] = {
  &scc_info_ClipboardRequest_MyInjector_2eproto.base,
  &scc_info_ClipboardResponse_MyInjector_2eproto.base,
  &scc_info_KeyboardRequest_MyInjector_2eproto.base,
  &scc_info_KeyboardResponse_MyInjector_2eproto.base,
  &scc_info_MouseRequest_MyInjector_2eproto.base,
  &scc_info_MouseResponse_MyInjector_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MyInjector_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyInjector_2eproto = {
  false, false, descriptor_table_protodef_MyInjector_2eproto, "MyInjector.proto", 797,
  &descriptor_table_MyInjector_2eproto_once, descriptor_table_MyInjector_2eproto_sccs, descriptor_table_MyInjector_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_MyInjector_2eproto::offsets,
  file_level_metadata_MyInjector_2eproto, 6, file_level_enum_descriptors_MyInjector_2eproto, file_level_service_descriptors_MyInjector_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MyInjector_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MyInjector_2eproto)), true);
namespace hid {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseRequest_ProceedType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MyInjector_2eproto);
  return file_level_enum_descriptors_MyInjector_2eproto[0];
}
bool MouseRequest_ProceedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MouseRequest_ProceedType MouseRequest::MOTION;
constexpr MouseRequest_ProceedType MouseRequest::DOWN;
constexpr MouseRequest_ProceedType MouseRequest::UP;
constexpr MouseRequest_ProceedType MouseRequest::Wheel;
constexpr MouseRequest_ProceedType MouseRequest::ProceedType_MIN;
constexpr MouseRequest_ProceedType MouseRequest::ProceedType_MAX;
constexpr int MouseRequest::ProceedType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseRequest_ButtonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_MyInjector_2eproto);
  return file_level_enum_descriptors_MyInjector_2eproto[1];
}
bool MouseRequest_ButtonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MouseRequest_ButtonType MouseRequest::LEFT;
constexpr MouseRequest_ButtonType MouseRequest::MIDDLE;
constexpr MouseRequest_ButtonType MouseRequest::RIGHT;
constexpr MouseRequest_ButtonType MouseRequest::NONE;
constexpr MouseRequest_ButtonType MouseRequest::ButtonType_MIN;
constexpr MouseRequest_ButtonType MouseRequest::ButtonType_MAX;
constexpr int MouseRequest::ButtonType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MouseRequest::InitAsDefaultInstance() {
}
class MouseRequest::_Internal {
 public:
};

MouseRequest::MouseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hid.MouseRequest)
}
MouseRequest::MouseRequest(const MouseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&proceedtype_, &from.proceedtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&location_) -
    reinterpret_cast<char*>(&proceedtype_)) + sizeof(location_));
  // @@protoc_insertion_point(copy_constructor:hid.MouseRequest)
}

void MouseRequest::SharedCtor() {
  ::memset(&proceedtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&proceedtype_)) + sizeof(location_));
}

MouseRequest::~MouseRequest() {
  // @@protoc_insertion_point(destructor:hid.MouseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MouseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MouseRequest::ArenaDtor(void* object) {
  MouseRequest* _this = reinterpret_cast< MouseRequest* >(object);
  (void)_this;
}
void MouseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MouseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MouseRequest& MouseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MouseRequest_MyInjector_2eproto.base);
  return *internal_default_instance();
}


void MouseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hid.MouseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&proceedtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&location_) -
      reinterpret_cast<char*>(&proceedtype_)) + sizeof(location_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .hid.MouseRequest.ProceedType proceedtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_proceedtype(static_cast<::hid::MouseRequest_ProceedType>(val));
        } else goto handle_unusual;
        continue;
      // .hid.MouseRequest.ButtonType buttontype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_buttontype(static_cast<::hid::MouseRequest_ButtonType>(val));
        } else goto handle_unusual;
        continue;
      // sint64 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MouseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hid.MouseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .hid.MouseRequest.ProceedType proceedtype = 1;
  if (this->proceedtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_proceedtype(), target);
  }

  // .hid.MouseRequest.ButtonType buttontype = 2;
  if (this->buttontype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_buttontype(), target);
  }

  // sint64 location = 3;
  if (this->location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(3, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hid.MouseRequest)
  return target;
}

size_t MouseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hid.MouseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hid.MouseRequest.ProceedType proceedtype = 1;
  if (this->proceedtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_proceedtype());
  }

  // .hid.MouseRequest.ButtonType buttontype = 2;
  if (this->buttontype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_buttontype());
  }

  // sint64 location = 3;
  if (this->location() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_location());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hid.MouseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MouseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hid.MouseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hid.MouseRequest)
    MergeFrom(*source);
  }
}

void MouseRequest::MergeFrom(const MouseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hid.MouseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proceedtype() != 0) {
    _internal_set_proceedtype(from._internal_proceedtype());
  }
  if (from.buttontype() != 0) {
    _internal_set_buttontype(from._internal_buttontype());
  }
  if (from.location() != 0) {
    _internal_set_location(from._internal_location());
  }
}

void MouseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hid.MouseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseRequest::CopyFrom(const MouseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hid.MouseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseRequest::IsInitialized() const {
  return true;
}

void MouseRequest::InternalSwap(MouseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseRequest, location_)
      + sizeof(MouseRequest::location_)
      - PROTOBUF_FIELD_OFFSET(MouseRequest, proceedtype_)>(
          reinterpret_cast<char*>(&proceedtype_),
          reinterpret_cast<char*>(&other->proceedtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MouseResponse::InitAsDefaultInstance() {
}
class MouseResponse::_Internal {
 public:
};

MouseResponse::MouseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hid.MouseResponse)
}
MouseResponse::MouseResponse(const MouseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&issame_, &from.issame_,
    static_cast<size_t>(reinterpret_cast<char*>(&cursorsize_) -
    reinterpret_cast<char*>(&issame_)) + sizeof(cursorsize_));
  // @@protoc_insertion_point(copy_constructor:hid.MouseResponse)
}

void MouseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MouseResponse_MyInjector_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&issame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cursorsize_) -
      reinterpret_cast<char*>(&issame_)) + sizeof(cursorsize_));
}

MouseResponse::~MouseResponse() {
  // @@protoc_insertion_point(destructor:hid.MouseResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MouseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MouseResponse::ArenaDtor(void* object) {
  MouseResponse* _this = reinterpret_cast< MouseResponse* >(object);
  (void)_this;
}
void MouseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MouseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MouseResponse& MouseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MouseResponse_MyInjector_2eproto.base);
  return *internal_default_instance();
}


void MouseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hid.MouseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&issame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cursorsize_) -
      reinterpret_cast<char*>(&issame_)) + sizeof(cursorsize_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MouseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isSame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          issame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 xHotspot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          xhotspot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 yHotspot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          yhotspot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cursorsize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cursorsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MouseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hid.MouseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSame = 1;
  if (this->issame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_issame(), target);
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // uint32 xHotspot = 4;
  if (this->xhotspot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_xhotspot(), target);
  }

  // uint32 yHotspot = 5;
  if (this->yhotspot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_yhotspot(), target);
  }

  // uint32 cursorsize = 6;
  if (this->cursorsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cursorsize(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hid.MouseResponse)
  return target;
}

size_t MouseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hid.MouseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bool isSame = 1;
  if (this->issame() != 0) {
    total_size += 1 + 1;
  }

  // uint32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // uint32 xHotspot = 4;
  if (this->xhotspot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_xhotspot());
  }

  // uint32 yHotspot = 5;
  if (this->yhotspot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yhotspot());
  }

  // uint32 cursorsize = 6;
  if (this->cursorsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cursorsize());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MouseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hid.MouseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MouseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hid.MouseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hid.MouseResponse)
    MergeFrom(*source);
  }
}

void MouseResponse::MergeFrom(const MouseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hid.MouseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.issame() != 0) {
    _internal_set_issame(from._internal_issame());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.xhotspot() != 0) {
    _internal_set_xhotspot(from._internal_xhotspot());
  }
  if (from.yhotspot() != 0) {
    _internal_set_yhotspot(from._internal_yhotspot());
  }
  if (from.cursorsize() != 0) {
    _internal_set_cursorsize(from._internal_cursorsize());
  }
}

void MouseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hid.MouseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseResponse::CopyFrom(const MouseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hid.MouseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseResponse::IsInitialized() const {
  return true;
}

void MouseResponse::InternalSwap(MouseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MouseResponse, cursorsize_)
      + sizeof(MouseResponse::cursorsize_)
      - PROTOBUF_FIELD_OFFSET(MouseResponse, issame_)>(
          reinterpret_cast<char*>(&issame_),
          reinterpret_cast<char*>(&other->issame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MouseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyboardRequest::InitAsDefaultInstance() {
}
class KeyboardRequest::_Internal {
 public:
};

KeyboardRequest::KeyboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hid.KeyboardRequest)
}
KeyboardRequest::KeyboardRequest(const KeyboardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&keycode_, &from.keycode_,
    static_cast<size_t>(reinterpret_cast<char*>(&extend_) -
    reinterpret_cast<char*>(&keycode_)) + sizeof(extend_));
  // @@protoc_insertion_point(copy_constructor:hid.KeyboardRequest)
}

void KeyboardRequest::SharedCtor() {
  ::memset(&keycode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extend_) -
      reinterpret_cast<char*>(&keycode_)) + sizeof(extend_));
}

KeyboardRequest::~KeyboardRequest() {
  // @@protoc_insertion_point(destructor:hid.KeyboardRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyboardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyboardRequest::ArenaDtor(void* object) {
  KeyboardRequest* _this = reinterpret_cast< KeyboardRequest* >(object);
  (void)_this;
}
void KeyboardRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyboardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyboardRequest& KeyboardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyboardRequest_MyInjector_2eproto.base);
  return *internal_default_instance();
}


void KeyboardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hid.KeyboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&keycode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extend_) -
      reinterpret_cast<char*>(&keycode_)) + sizeof(extend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyboardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 keycode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keycode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 extend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          extend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyboardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hid.KeyboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 keycode = 1;
  if (this->keycode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_keycode(), target);
  }

  // sint32 extend = 2;
  if (this->extend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_extend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hid.KeyboardRequest)
  return target;
}

size_t KeyboardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hid.KeyboardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 keycode = 1;
  if (this->keycode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_keycode());
  }

  // sint32 extend = 2;
  if (this->extend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_extend());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyboardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hid.KeyboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyboardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyboardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hid.KeyboardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hid.KeyboardRequest)
    MergeFrom(*source);
  }
}

void KeyboardRequest::MergeFrom(const KeyboardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hid.KeyboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keycode() != 0) {
    _internal_set_keycode(from._internal_keycode());
  }
  if (from.extend() != 0) {
    _internal_set_extend(from._internal_extend());
  }
}

void KeyboardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hid.KeyboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyboardRequest::CopyFrom(const KeyboardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hid.KeyboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyboardRequest::IsInitialized() const {
  return true;
}

void KeyboardRequest::InternalSwap(KeyboardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyboardRequest, extend_)
      + sizeof(KeyboardRequest::extend_)
      - PROTOBUF_FIELD_OFFSET(KeyboardRequest, keycode_)>(
          reinterpret_cast<char*>(&keycode_),
          reinterpret_cast<char*>(&other->keycode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyboardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyboardResponse::InitAsDefaultInstance() {
}
class KeyboardResponse::_Internal {
 public:
};

KeyboardResponse::KeyboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hid.KeyboardResponse)
}
KeyboardResponse::KeyboardResponse(const KeyboardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reply().empty()) {
    reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reply(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:hid.KeyboardResponse)
}

void KeyboardResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyboardResponse_MyInjector_2eproto.base);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyboardResponse::~KeyboardResponse() {
  // @@protoc_insertion_point(destructor:hid.KeyboardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyboardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyboardResponse::ArenaDtor(void* object) {
  KeyboardResponse* _this = reinterpret_cast< KeyboardResponse* >(object);
  (void)_this;
}
void KeyboardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyboardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyboardResponse& KeyboardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyboardResponse_MyInjector_2eproto.base);
  return *internal_default_instance();
}


void KeyboardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hid.KeyboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyboardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hid.KeyboardResponse.reply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyboardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hid.KeyboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply().data(), static_cast<int>(this->_internal_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hid.KeyboardResponse.reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hid.KeyboardResponse)
  return target;
}

size_t KeyboardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hid.KeyboardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyboardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hid.KeyboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyboardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyboardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hid.KeyboardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hid.KeyboardResponse)
    MergeFrom(*source);
  }
}

void KeyboardResponse::MergeFrom(const KeyboardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hid.KeyboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reply().size() > 0) {
    _internal_set_reply(from._internal_reply());
  }
}

void KeyboardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hid.KeyboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyboardResponse::CopyFrom(const KeyboardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hid.KeyboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyboardResponse::IsInitialized() const {
  return true;
}

void KeyboardResponse::InternalSwap(KeyboardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reply_.Swap(&other->reply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyboardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClipboardRequest::InitAsDefaultInstance() {
}
class ClipboardRequest::_Internal {
 public:
};

ClipboardRequest::ClipboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hid.ClipboardRequest)
}
ClipboardRequest::ClipboardRequest(const ClipboardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clipboarddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clipboarddata().empty()) {
    clipboarddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clipboarddata(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:hid.ClipboardRequest)
}

void ClipboardRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClipboardRequest_MyInjector_2eproto.base);
  clipboarddata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClipboardRequest::~ClipboardRequest() {
  // @@protoc_insertion_point(destructor:hid.ClipboardRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClipboardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clipboarddata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClipboardRequest::ArenaDtor(void* object) {
  ClipboardRequest* _this = reinterpret_cast< ClipboardRequest* >(object);
  (void)_this;
}
void ClipboardRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClipboardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClipboardRequest& ClipboardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClipboardRequest_MyInjector_2eproto.base);
  return *internal_default_instance();
}


void ClipboardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hid.ClipboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clipboarddata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClipboardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clipboardData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clipboarddata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hid.ClipboardRequest.clipboardData"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClipboardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hid.ClipboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clipboardData = 1;
  if (this->clipboarddata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clipboarddata().data(), static_cast<int>(this->_internal_clipboarddata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hid.ClipboardRequest.clipboardData");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clipboarddata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hid.ClipboardRequest)
  return target;
}

size_t ClipboardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hid.ClipboardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clipboardData = 1;
  if (this->clipboarddata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clipboarddata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClipboardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hid.ClipboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClipboardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClipboardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hid.ClipboardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hid.ClipboardRequest)
    MergeFrom(*source);
  }
}

void ClipboardRequest::MergeFrom(const ClipboardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hid.ClipboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clipboarddata().size() > 0) {
    _internal_set_clipboarddata(from._internal_clipboarddata());
  }
}

void ClipboardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hid.ClipboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipboardRequest::CopyFrom(const ClipboardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hid.ClipboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipboardRequest::IsInitialized() const {
  return true;
}

void ClipboardRequest::InternalSwap(ClipboardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clipboarddata_.Swap(&other->clipboarddata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClipboardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClipboardResponse::InitAsDefaultInstance() {
}
class ClipboardResponse::_Internal {
 public:
};

ClipboardResponse::ClipboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hid.ClipboardResponse)
}
ClipboardResponse::ClipboardResponse(const ClipboardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reply().empty()) {
    reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reply(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:hid.ClipboardResponse)
}

void ClipboardResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClipboardResponse_MyInjector_2eproto.base);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClipboardResponse::~ClipboardResponse() {
  // @@protoc_insertion_point(destructor:hid.ClipboardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClipboardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClipboardResponse::ArenaDtor(void* object) {
  ClipboardResponse* _this = reinterpret_cast< ClipboardResponse* >(object);
  (void)_this;
}
void ClipboardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClipboardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClipboardResponse& ClipboardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClipboardResponse_MyInjector_2eproto.base);
  return *internal_default_instance();
}


void ClipboardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hid.ClipboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClipboardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hid.ClipboardResponse.reply"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClipboardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hid.ClipboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply().data(), static_cast<int>(this->_internal_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hid.ClipboardResponse.reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hid.ClipboardResponse)
  return target;
}

size_t ClipboardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hid.ClipboardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClipboardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hid.ClipboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClipboardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClipboardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hid.ClipboardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hid.ClipboardResponse)
    MergeFrom(*source);
  }
}

void ClipboardResponse::MergeFrom(const ClipboardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hid.ClipboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reply().size() > 0) {
    _internal_set_reply(from._internal_reply());
  }
}

void ClipboardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hid.ClipboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClipboardResponse::CopyFrom(const ClipboardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hid.ClipboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipboardResponse::IsInitialized() const {
  return true;
}

void ClipboardResponse::InternalSwap(ClipboardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reply_.Swap(&other->reply_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClipboardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hid
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hid::MouseRequest* Arena::CreateMaybeMessage< ::hid::MouseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hid::MouseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hid::MouseResponse* Arena::CreateMaybeMessage< ::hid::MouseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hid::MouseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hid::KeyboardRequest* Arena::CreateMaybeMessage< ::hid::KeyboardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hid::KeyboardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hid::KeyboardResponse* Arena::CreateMaybeMessage< ::hid::KeyboardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hid::KeyboardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::hid::ClipboardRequest* Arena::CreateMaybeMessage< ::hid::ClipboardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hid::ClipboardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::hid::ClipboardResponse* Arena::CreateMaybeMessage< ::hid::ClipboardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hid::ClipboardResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
