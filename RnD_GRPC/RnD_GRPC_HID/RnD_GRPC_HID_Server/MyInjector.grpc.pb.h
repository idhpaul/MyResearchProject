// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MyInjector.proto
#ifndef GRPC_MyInjector_2eproto__INCLUDED
#define GRPC_MyInjector_2eproto__INCLUDED

#include "MyInjector.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace hid {

class Injection final {
 public:
  static constexpr char const* service_full_name() {
    return "hid.Injection";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::hid::KeyboardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::KeyboardResponse>> AsyncPushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::KeyboardResponse>>(AsyncPushKeyboardInjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::KeyboardResponse>> PrepareAsyncPushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::KeyboardResponse>>(PrepareAsyncPushKeyboardInjectRaw(context, request, cq));
    }
    virtual ::grpc::Status PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::hid::MouseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::MouseResponse>> AsyncPushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::MouseResponse>>(AsyncPushMouseInjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::MouseResponse>> PrepareAsyncPushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::MouseResponse>>(PrepareAsyncPushMouseInjectRaw(context, request, cq));
    }
    virtual ::grpc::Status PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::hid::ClipboardResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::ClipboardResponse>> AsyncPushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::ClipboardResponse>>(AsyncPushClipboardInjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::ClipboardResponse>> PrepareAsyncPushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::hid::ClipboardResponse>>(PrepareAsyncPushClipboardInjectRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hid::KeyboardResponse>* AsyncPushKeyboardInjectRaw(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hid::KeyboardResponse>* PrepareAsyncPushKeyboardInjectRaw(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hid::MouseResponse>* AsyncPushMouseInjectRaw(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hid::MouseResponse>* PrepareAsyncPushMouseInjectRaw(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hid::ClipboardResponse>* AsyncPushClipboardInjectRaw(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::hid::ClipboardResponse>* PrepareAsyncPushClipboardInjectRaw(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::hid::KeyboardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::KeyboardResponse>> AsyncPushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::KeyboardResponse>>(AsyncPushKeyboardInjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::KeyboardResponse>> PrepareAsyncPushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::KeyboardResponse>>(PrepareAsyncPushKeyboardInjectRaw(context, request, cq));
    }
    ::grpc::Status PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::hid::MouseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::MouseResponse>> AsyncPushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::MouseResponse>>(AsyncPushMouseInjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::MouseResponse>> PrepareAsyncPushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::MouseResponse>>(PrepareAsyncPushMouseInjectRaw(context, request, cq));
    }
    ::grpc::Status PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::hid::ClipboardResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::ClipboardResponse>> AsyncPushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::ClipboardResponse>>(AsyncPushClipboardInjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::ClipboardResponse>> PrepareAsyncPushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::hid::ClipboardResponse>>(PrepareAsyncPushClipboardInjectRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::hid::KeyboardResponse>* AsyncPushKeyboardInjectRaw(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hid::KeyboardResponse>* PrepareAsyncPushKeyboardInjectRaw(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hid::MouseResponse>* AsyncPushMouseInjectRaw(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hid::MouseResponse>* PrepareAsyncPushMouseInjectRaw(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hid::ClipboardResponse>* AsyncPushClipboardInjectRaw(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::hid::ClipboardResponse>* PrepareAsyncPushClipboardInjectRaw(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PushKeyboardInject_;
    const ::grpc::internal::RpcMethod rpcmethod_PushMouseInject_;
    const ::grpc::internal::RpcMethod rpcmethod_PushClipboardInject_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PushKeyboardInject(::grpc::ServerContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response);
    virtual ::grpc::Status PushMouseInject(::grpc::ServerContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response);
    virtual ::grpc::Status PushClipboardInject(::grpc::ServerContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_PushKeyboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushKeyboardInject() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PushKeyboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushKeyboardInject(::grpc::ServerContext* /*context*/, const ::hid::KeyboardRequest* /*request*/, ::hid::KeyboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushKeyboardInject(::grpc::ServerContext* context, ::hid::KeyboardRequest* request, ::grpc::ServerAsyncResponseWriter< ::hid::KeyboardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushMouseInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushMouseInject() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PushMouseInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMouseInject(::grpc::ServerContext* /*context*/, const ::hid::MouseRequest* /*request*/, ::hid::MouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushMouseInject(::grpc::ServerContext* context, ::hid::MouseRequest* request, ::grpc::ServerAsyncResponseWriter< ::hid::MouseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushClipboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushClipboardInject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PushClipboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClipboardInject(::grpc::ServerContext* /*context*/, const ::hid::ClipboardRequest* /*request*/, ::hid::ClipboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushClipboardInject(::grpc::ServerContext* context, ::hid::ClipboardRequest* request, ::grpc::ServerAsyncResponseWriter< ::hid::ClipboardResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PushKeyboardInject<WithAsyncMethod_PushMouseInject<WithAsyncMethod_PushClipboardInject<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushKeyboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PushKeyboardInject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::hid::KeyboardRequest, ::hid::KeyboardResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response) { return this->PushKeyboardInject(context, request, response); }));}
    void SetMessageAllocatorFor_PushKeyboardInject(
        ::grpc::experimental::MessageAllocator< ::hid::KeyboardRequest, ::hid::KeyboardResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hid::KeyboardRequest, ::hid::KeyboardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PushKeyboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushKeyboardInject(::grpc::ServerContext* /*context*/, const ::hid::KeyboardRequest* /*request*/, ::hid::KeyboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushKeyboardInject(
      ::grpc::CallbackServerContext* /*context*/, const ::hid::KeyboardRequest* /*request*/, ::hid::KeyboardResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushKeyboardInject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::hid::KeyboardRequest* /*request*/, ::hid::KeyboardResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushMouseInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PushMouseInject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::hid::MouseRequest, ::hid::MouseResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response) { return this->PushMouseInject(context, request, response); }));}
    void SetMessageAllocatorFor_PushMouseInject(
        ::grpc::experimental::MessageAllocator< ::hid::MouseRequest, ::hid::MouseResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hid::MouseRequest, ::hid::MouseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PushMouseInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMouseInject(::grpc::ServerContext* /*context*/, const ::hid::MouseRequest* /*request*/, ::hid::MouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushMouseInject(
      ::grpc::CallbackServerContext* /*context*/, const ::hid::MouseRequest* /*request*/, ::hid::MouseResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushMouseInject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::hid::MouseRequest* /*request*/, ::hid::MouseResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PushClipboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_PushClipboardInject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::hid::ClipboardRequest, ::hid::ClipboardResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response) { return this->PushClipboardInject(context, request, response); }));}
    void SetMessageAllocatorFor_PushClipboardInject(
        ::grpc::experimental::MessageAllocator< ::hid::ClipboardRequest, ::hid::ClipboardResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::hid::ClipboardRequest, ::hid::ClipboardResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_PushClipboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClipboardInject(::grpc::ServerContext* /*context*/, const ::hid::ClipboardRequest* /*request*/, ::hid::ClipboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushClipboardInject(
      ::grpc::CallbackServerContext* /*context*/, const ::hid::ClipboardRequest* /*request*/, ::hid::ClipboardResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushClipboardInject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::hid::ClipboardRequest* /*request*/, ::hid::ClipboardResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_PushKeyboardInject<ExperimentalWithCallbackMethod_PushMouseInject<ExperimentalWithCallbackMethod_PushClipboardInject<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_PushKeyboardInject<ExperimentalWithCallbackMethod_PushMouseInject<ExperimentalWithCallbackMethod_PushClipboardInject<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PushKeyboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushKeyboardInject() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PushKeyboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushKeyboardInject(::grpc::ServerContext* /*context*/, const ::hid::KeyboardRequest* /*request*/, ::hid::KeyboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushMouseInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushMouseInject() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PushMouseInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMouseInject(::grpc::ServerContext* /*context*/, const ::hid::MouseRequest* /*request*/, ::hid::MouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushClipboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushClipboardInject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PushClipboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClipboardInject(::grpc::ServerContext* /*context*/, const ::hid::ClipboardRequest* /*request*/, ::hid::ClipboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushKeyboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushKeyboardInject() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PushKeyboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushKeyboardInject(::grpc::ServerContext* /*context*/, const ::hid::KeyboardRequest* /*request*/, ::hid::KeyboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushKeyboardInject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushMouseInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushMouseInject() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PushMouseInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMouseInject(::grpc::ServerContext* /*context*/, const ::hid::MouseRequest* /*request*/, ::hid::MouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushMouseInject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushClipboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushClipboardInject() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PushClipboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClipboardInject(::grpc::ServerContext* /*context*/, const ::hid::ClipboardRequest* /*request*/, ::hid::ClipboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushClipboardInject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushKeyboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PushKeyboardInject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushKeyboardInject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PushKeyboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushKeyboardInject(::grpc::ServerContext* /*context*/, const ::hid::KeyboardRequest* /*request*/, ::hid::KeyboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushKeyboardInject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushKeyboardInject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushMouseInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PushMouseInject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushMouseInject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PushMouseInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushMouseInject(::grpc::ServerContext* /*context*/, const ::hid::MouseRequest* /*request*/, ::hid::MouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushMouseInject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushMouseInject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PushClipboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_PushClipboardInject() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PushClipboardInject(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_PushClipboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushClipboardInject(::grpc::ServerContext* /*context*/, const ::hid::ClipboardRequest* /*request*/, ::hid::ClipboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* PushClipboardInject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* PushClipboardInject(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushKeyboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushKeyboardInject() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hid::KeyboardRequest, ::hid::KeyboardResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hid::KeyboardRequest, ::hid::KeyboardResponse>* streamer) {
                       return this->StreamedPushKeyboardInject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushKeyboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushKeyboardInject(::grpc::ServerContext* /*context*/, const ::hid::KeyboardRequest* /*request*/, ::hid::KeyboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushKeyboardInject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hid::KeyboardRequest,::hid::KeyboardResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushMouseInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushMouseInject() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hid::MouseRequest, ::hid::MouseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hid::MouseRequest, ::hid::MouseResponse>* streamer) {
                       return this->StreamedPushMouseInject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushMouseInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushMouseInject(::grpc::ServerContext* /*context*/, const ::hid::MouseRequest* /*request*/, ::hid::MouseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushMouseInject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hid::MouseRequest,::hid::MouseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PushClipboardInject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PushClipboardInject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::hid::ClipboardRequest, ::hid::ClipboardResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::hid::ClipboardRequest, ::hid::ClipboardResponse>* streamer) {
                       return this->StreamedPushClipboardInject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PushClipboardInject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PushClipboardInject(::grpc::ServerContext* /*context*/, const ::hid::ClipboardRequest* /*request*/, ::hid::ClipboardResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPushClipboardInject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::hid::ClipboardRequest,::hid::ClipboardResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PushKeyboardInject<WithStreamedUnaryMethod_PushMouseInject<WithStreamedUnaryMethod_PushClipboardInject<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PushKeyboardInject<WithStreamedUnaryMethod_PushMouseInject<WithStreamedUnaryMethod_PushClipboardInject<Service > > > StreamedService;
};

}  // namespace hid


#endif  // GRPC_MyInjector_2eproto__INCLUDED
