// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MyInjector.proto

#include "MyInjector.pb.h"
#include "MyInjector.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace hid {

static const char* Injection_method_names[] = {
  "/hid.Injection/PushKeyboardInject",
  "/hid.Injection/PushMouseInject",
  "/hid.Injection/PushClipboardInject",
};

std::unique_ptr< Injection::Stub> Injection::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Injection::Stub> stub(new Injection::Stub(channel));
  return stub;
}

Injection::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushKeyboardInject_(Injection_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushMouseInject_(Injection_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PushClipboardInject_(Injection_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Injection::Stub::PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::hid::KeyboardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushKeyboardInject_, context, request, response);
}

void Injection::Stub::experimental_async::PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushKeyboardInject_, context, request, response, std::move(f));
}

void Injection::Stub::experimental_async::PushKeyboardInject(::grpc::ClientContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushKeyboardInject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hid::KeyboardResponse>* Injection::Stub::PrepareAsyncPushKeyboardInjectRaw(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::hid::KeyboardResponse>::Create(channel_.get(), cq, rpcmethod_PushKeyboardInject_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::hid::KeyboardResponse>* Injection::Stub::AsyncPushKeyboardInjectRaw(::grpc::ClientContext* context, const ::hid::KeyboardRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushKeyboardInjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Injection::Stub::PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::hid::MouseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushMouseInject_, context, request, response);
}

void Injection::Stub::experimental_async::PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushMouseInject_, context, request, response, std::move(f));
}

void Injection::Stub::experimental_async::PushMouseInject(::grpc::ClientContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushMouseInject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hid::MouseResponse>* Injection::Stub::PrepareAsyncPushMouseInjectRaw(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::hid::MouseResponse>::Create(channel_.get(), cq, rpcmethod_PushMouseInject_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::hid::MouseResponse>* Injection::Stub::AsyncPushMouseInjectRaw(::grpc::ClientContext* context, const ::hid::MouseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushMouseInjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Injection::Stub::PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::hid::ClipboardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushClipboardInject_, context, request, response);
}

void Injection::Stub::experimental_async::PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushClipboardInject_, context, request, response, std::move(f));
}

void Injection::Stub::experimental_async::PushClipboardInject(::grpc::ClientContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushClipboardInject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::hid::ClipboardResponse>* Injection::Stub::PrepareAsyncPushClipboardInjectRaw(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::hid::ClipboardResponse>::Create(channel_.get(), cq, rpcmethod_PushClipboardInject_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::hid::ClipboardResponse>* Injection::Stub::AsyncPushClipboardInjectRaw(::grpc::ClientContext* context, const ::hid::ClipboardRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPushClipboardInjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

Injection::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Injection_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Injection::Service, ::hid::KeyboardRequest, ::hid::KeyboardResponse>(
          [](Injection::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hid::KeyboardRequest* req,
             ::hid::KeyboardResponse* resp) {
               return service->PushKeyboardInject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Injection_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Injection::Service, ::hid::MouseRequest, ::hid::MouseResponse>(
          [](Injection::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hid::MouseRequest* req,
             ::hid::MouseResponse* resp) {
               return service->PushMouseInject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Injection_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Injection::Service, ::hid::ClipboardRequest, ::hid::ClipboardResponse>(
          [](Injection::Service* service,
             ::grpc::ServerContext* ctx,
             const ::hid::ClipboardRequest* req,
             ::hid::ClipboardResponse* resp) {
               return service->PushClipboardInject(ctx, req, resp);
             }, this)));
}

Injection::Service::~Service() {
}

::grpc::Status Injection::Service::PushKeyboardInject(::grpc::ServerContext* context, const ::hid::KeyboardRequest* request, ::hid::KeyboardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Injection::Service::PushMouseInject(::grpc::ServerContext* context, const ::hid::MouseRequest* request, ::hid::MouseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Injection::Service::PushClipboardInject(::grpc::ServerContext* context, const ::hid::ClipboardRequest* request, ::hid::ClipboardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace hid

