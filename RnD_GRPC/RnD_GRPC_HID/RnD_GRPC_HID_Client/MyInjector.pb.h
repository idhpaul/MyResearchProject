// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyInjector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MyInjector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MyInjector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyInjector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MyInjector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MyInjector_2eproto;
namespace hid {
class ClipboardRequest;
class ClipboardRequestDefaultTypeInternal;
extern ClipboardRequestDefaultTypeInternal _ClipboardRequest_default_instance_;
class ClipboardResponse;
class ClipboardResponseDefaultTypeInternal;
extern ClipboardResponseDefaultTypeInternal _ClipboardResponse_default_instance_;
class KeyboardRequest;
class KeyboardRequestDefaultTypeInternal;
extern KeyboardRequestDefaultTypeInternal _KeyboardRequest_default_instance_;
class KeyboardResponse;
class KeyboardResponseDefaultTypeInternal;
extern KeyboardResponseDefaultTypeInternal _KeyboardResponse_default_instance_;
class MouseRequest;
class MouseRequestDefaultTypeInternal;
extern MouseRequestDefaultTypeInternal _MouseRequest_default_instance_;
class MouseResponse;
class MouseResponseDefaultTypeInternal;
extern MouseResponseDefaultTypeInternal _MouseResponse_default_instance_;
}  // namespace hid
PROTOBUF_NAMESPACE_OPEN
template<> ::hid::ClipboardRequest* Arena::CreateMaybeMessage<::hid::ClipboardRequest>(Arena*);
template<> ::hid::ClipboardResponse* Arena::CreateMaybeMessage<::hid::ClipboardResponse>(Arena*);
template<> ::hid::KeyboardRequest* Arena::CreateMaybeMessage<::hid::KeyboardRequest>(Arena*);
template<> ::hid::KeyboardResponse* Arena::CreateMaybeMessage<::hid::KeyboardResponse>(Arena*);
template<> ::hid::MouseRequest* Arena::CreateMaybeMessage<::hid::MouseRequest>(Arena*);
template<> ::hid::MouseResponse* Arena::CreateMaybeMessage<::hid::MouseResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hid {

enum MouseRequest_ProceedType : int {
  MouseRequest_ProceedType_MOTION = 0,
  MouseRequest_ProceedType_DOWN = 1,
  MouseRequest_ProceedType_UP = 2,
  MouseRequest_ProceedType_Wheel = 3,
  MouseRequest_ProceedType_MouseRequest_ProceedType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MouseRequest_ProceedType_MouseRequest_ProceedType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MouseRequest_ProceedType_IsValid(int value);
constexpr MouseRequest_ProceedType MouseRequest_ProceedType_ProceedType_MIN = MouseRequest_ProceedType_MOTION;
constexpr MouseRequest_ProceedType MouseRequest_ProceedType_ProceedType_MAX = MouseRequest_ProceedType_Wheel;
constexpr int MouseRequest_ProceedType_ProceedType_ARRAYSIZE = MouseRequest_ProceedType_ProceedType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseRequest_ProceedType_descriptor();
template<typename T>
inline const std::string& MouseRequest_ProceedType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MouseRequest_ProceedType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MouseRequest_ProceedType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MouseRequest_ProceedType_descriptor(), enum_t_value);
}
inline bool MouseRequest_ProceedType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MouseRequest_ProceedType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MouseRequest_ProceedType>(
    MouseRequest_ProceedType_descriptor(), name, value);
}
enum MouseRequest_ButtonType : int {
  MouseRequest_ButtonType_LEFT = 0,
  MouseRequest_ButtonType_MIDDLE = 1,
  MouseRequest_ButtonType_RIGHT = 2,
  MouseRequest_ButtonType_NONE = 3,
  MouseRequest_ButtonType_MouseRequest_ButtonType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MouseRequest_ButtonType_MouseRequest_ButtonType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MouseRequest_ButtonType_IsValid(int value);
constexpr MouseRequest_ButtonType MouseRequest_ButtonType_ButtonType_MIN = MouseRequest_ButtonType_LEFT;
constexpr MouseRequest_ButtonType MouseRequest_ButtonType_ButtonType_MAX = MouseRequest_ButtonType_NONE;
constexpr int MouseRequest_ButtonType_ButtonType_ARRAYSIZE = MouseRequest_ButtonType_ButtonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MouseRequest_ButtonType_descriptor();
template<typename T>
inline const std::string& MouseRequest_ButtonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MouseRequest_ButtonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MouseRequest_ButtonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MouseRequest_ButtonType_descriptor(), enum_t_value);
}
inline bool MouseRequest_ButtonType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MouseRequest_ButtonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MouseRequest_ButtonType>(
    MouseRequest_ButtonType_descriptor(), name, value);
}
// ===================================================================

class MouseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hid.MouseRequest) */ {
 public:
  inline MouseRequest() : MouseRequest(nullptr) {}
  virtual ~MouseRequest();

  MouseRequest(const MouseRequest& from);
  MouseRequest(MouseRequest&& from) noexcept
    : MouseRequest() {
    *this = ::std::move(from);
  }

  inline MouseRequest& operator=(const MouseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MouseRequest& operator=(MouseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MouseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MouseRequest* internal_default_instance() {
    return reinterpret_cast<const MouseRequest*>(
               &_MouseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MouseRequest& a, MouseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MouseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MouseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MouseRequest* New() const final {
    return CreateMaybeMessage<MouseRequest>(nullptr);
  }

  MouseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MouseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MouseRequest& from);
  void MergeFrom(const MouseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MouseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hid.MouseRequest";
  }
  protected:
  explicit MouseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyInjector_2eproto);
    return ::descriptor_table_MyInjector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MouseRequest_ProceedType ProceedType;
  static constexpr ProceedType MOTION =
    MouseRequest_ProceedType_MOTION;
  static constexpr ProceedType DOWN =
    MouseRequest_ProceedType_DOWN;
  static constexpr ProceedType UP =
    MouseRequest_ProceedType_UP;
  static constexpr ProceedType Wheel =
    MouseRequest_ProceedType_Wheel;
  static inline bool ProceedType_IsValid(int value) {
    return MouseRequest_ProceedType_IsValid(value);
  }
  static constexpr ProceedType ProceedType_MIN =
    MouseRequest_ProceedType_ProceedType_MIN;
  static constexpr ProceedType ProceedType_MAX =
    MouseRequest_ProceedType_ProceedType_MAX;
  static constexpr int ProceedType_ARRAYSIZE =
    MouseRequest_ProceedType_ProceedType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProceedType_descriptor() {
    return MouseRequest_ProceedType_descriptor();
  }
  template<typename T>
  static inline const std::string& ProceedType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProceedType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProceedType_Name.");
    return MouseRequest_ProceedType_Name(enum_t_value);
  }
  static inline bool ProceedType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProceedType* value) {
    return MouseRequest_ProceedType_Parse(name, value);
  }

  typedef MouseRequest_ButtonType ButtonType;
  static constexpr ButtonType LEFT =
    MouseRequest_ButtonType_LEFT;
  static constexpr ButtonType MIDDLE =
    MouseRequest_ButtonType_MIDDLE;
  static constexpr ButtonType RIGHT =
    MouseRequest_ButtonType_RIGHT;
  static constexpr ButtonType NONE =
    MouseRequest_ButtonType_NONE;
  static inline bool ButtonType_IsValid(int value) {
    return MouseRequest_ButtonType_IsValid(value);
  }
  static constexpr ButtonType ButtonType_MIN =
    MouseRequest_ButtonType_ButtonType_MIN;
  static constexpr ButtonType ButtonType_MAX =
    MouseRequest_ButtonType_ButtonType_MAX;
  static constexpr int ButtonType_ARRAYSIZE =
    MouseRequest_ButtonType_ButtonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ButtonType_descriptor() {
    return MouseRequest_ButtonType_descriptor();
  }
  template<typename T>
  static inline const std::string& ButtonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ButtonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ButtonType_Name.");
    return MouseRequest_ButtonType_Name(enum_t_value);
  }
  static inline bool ButtonType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ButtonType* value) {
    return MouseRequest_ButtonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProceedtypeFieldNumber = 1,
    kButtontypeFieldNumber = 2,
    kLocationFieldNumber = 3,
  };
  // .hid.MouseRequest.ProceedType proceedtype = 1;
  void clear_proceedtype();
  ::hid::MouseRequest_ProceedType proceedtype() const;
  void set_proceedtype(::hid::MouseRequest_ProceedType value);
  private:
  ::hid::MouseRequest_ProceedType _internal_proceedtype() const;
  void _internal_set_proceedtype(::hid::MouseRequest_ProceedType value);
  public:

  // .hid.MouseRequest.ButtonType buttontype = 2;
  void clear_buttontype();
  ::hid::MouseRequest_ButtonType buttontype() const;
  void set_buttontype(::hid::MouseRequest_ButtonType value);
  private:
  ::hid::MouseRequest_ButtonType _internal_buttontype() const;
  void _internal_set_buttontype(::hid::MouseRequest_ButtonType value);
  public:

  // sint64 location = 3;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int64 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hid.MouseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int proceedtype_;
  int buttontype_;
  ::PROTOBUF_NAMESPACE_ID::int64 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyInjector_2eproto;
};
// -------------------------------------------------------------------

class MouseResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hid.MouseResponse) */ {
 public:
  inline MouseResponse() : MouseResponse(nullptr) {}
  virtual ~MouseResponse();

  MouseResponse(const MouseResponse& from);
  MouseResponse(MouseResponse&& from) noexcept
    : MouseResponse() {
    *this = ::std::move(from);
  }

  inline MouseResponse& operator=(const MouseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MouseResponse& operator=(MouseResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MouseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MouseResponse* internal_default_instance() {
    return reinterpret_cast<const MouseResponse*>(
               &_MouseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MouseResponse& a, MouseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MouseResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MouseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MouseResponse* New() const final {
    return CreateMaybeMessage<MouseResponse>(nullptr);
  }

  MouseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MouseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MouseResponse& from);
  void MergeFrom(const MouseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MouseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hid.MouseResponse";
  }
  protected:
  explicit MouseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyInjector_2eproto);
    return ::descriptor_table_MyInjector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kIsSameFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kXHotspotFieldNumber = 4,
    kYHotspotFieldNumber = 5,
    kCursorsizeFieldNumber = 6,
  };
  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool isSame = 1;
  void clear_issame();
  bool issame() const;
  void set_issame(bool value);
  private:
  bool _internal_issame() const;
  void _internal_set_issame(bool value);
  public:

  // uint32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 xHotspot = 4;
  void clear_xhotspot();
  ::PROTOBUF_NAMESPACE_ID::uint32 xhotspot() const;
  void set_xhotspot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_xhotspot() const;
  void _internal_set_xhotspot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 yHotspot = 5;
  void clear_yhotspot();
  ::PROTOBUF_NAMESPACE_ID::uint32 yhotspot() const;
  void set_yhotspot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_yhotspot() const;
  void _internal_set_yhotspot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cursorsize = 6;
  void clear_cursorsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 cursorsize() const;
  void set_cursorsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cursorsize() const;
  void _internal_set_cursorsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hid.MouseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool issame_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 xhotspot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 yhotspot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cursorsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyInjector_2eproto;
};
// -------------------------------------------------------------------

class KeyboardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hid.KeyboardRequest) */ {
 public:
  inline KeyboardRequest() : KeyboardRequest(nullptr) {}
  virtual ~KeyboardRequest();

  KeyboardRequest(const KeyboardRequest& from);
  KeyboardRequest(KeyboardRequest&& from) noexcept
    : KeyboardRequest() {
    *this = ::std::move(from);
  }

  inline KeyboardRequest& operator=(const KeyboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyboardRequest& operator=(KeyboardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyboardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyboardRequest* internal_default_instance() {
    return reinterpret_cast<const KeyboardRequest*>(
               &_KeyboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyboardRequest& a, KeyboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyboardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyboardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyboardRequest* New() const final {
    return CreateMaybeMessage<KeyboardRequest>(nullptr);
  }

  KeyboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyboardRequest& from);
  void MergeFrom(const KeyboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hid.KeyboardRequest";
  }
  protected:
  explicit KeyboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyInjector_2eproto);
    return ::descriptor_table_MyInjector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeycodeFieldNumber = 1,
    kExtendFieldNumber = 2,
  };
  // sint32 keycode = 1;
  void clear_keycode();
  ::PROTOBUF_NAMESPACE_ID::int32 keycode() const;
  void set_keycode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keycode() const;
  void _internal_set_keycode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 extend = 2;
  void clear_extend();
  ::PROTOBUF_NAMESPACE_ID::int32 extend() const;
  void set_extend(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extend() const;
  void _internal_set_extend(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hid.KeyboardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 keycode_;
  ::PROTOBUF_NAMESPACE_ID::int32 extend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyInjector_2eproto;
};
// -------------------------------------------------------------------

class KeyboardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hid.KeyboardResponse) */ {
 public:
  inline KeyboardResponse() : KeyboardResponse(nullptr) {}
  virtual ~KeyboardResponse();

  KeyboardResponse(const KeyboardResponse& from);
  KeyboardResponse(KeyboardResponse&& from) noexcept
    : KeyboardResponse() {
    *this = ::std::move(from);
  }

  inline KeyboardResponse& operator=(const KeyboardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyboardResponse& operator=(KeyboardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyboardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyboardResponse* internal_default_instance() {
    return reinterpret_cast<const KeyboardResponse*>(
               &_KeyboardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KeyboardResponse& a, KeyboardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyboardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyboardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyboardResponse* New() const final {
    return CreateMaybeMessage<KeyboardResponse>(nullptr);
  }

  KeyboardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyboardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyboardResponse& from);
  void MergeFrom(const KeyboardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyboardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hid.KeyboardResponse";
  }
  protected:
  explicit KeyboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyInjector_2eproto);
    return ::descriptor_table_MyInjector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
  };
  // string reply = 1;
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // @@protoc_insertion_point(class_scope:hid.KeyboardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyInjector_2eproto;
};
// -------------------------------------------------------------------

class ClipboardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hid.ClipboardRequest) */ {
 public:
  inline ClipboardRequest() : ClipboardRequest(nullptr) {}
  virtual ~ClipboardRequest();

  ClipboardRequest(const ClipboardRequest& from);
  ClipboardRequest(ClipboardRequest&& from) noexcept
    : ClipboardRequest() {
    *this = ::std::move(from);
  }

  inline ClipboardRequest& operator=(const ClipboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipboardRequest& operator=(ClipboardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClipboardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClipboardRequest* internal_default_instance() {
    return reinterpret_cast<const ClipboardRequest*>(
               &_ClipboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClipboardRequest& a, ClipboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipboardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClipboardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClipboardRequest* New() const final {
    return CreateMaybeMessage<ClipboardRequest>(nullptr);
  }

  ClipboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClipboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClipboardRequest& from);
  void MergeFrom(const ClipboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hid.ClipboardRequest";
  }
  protected:
  explicit ClipboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyInjector_2eproto);
    return ::descriptor_table_MyInjector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipboardDataFieldNumber = 1,
  };
  // string clipboardData = 1;
  void clear_clipboarddata();
  const std::string& clipboarddata() const;
  void set_clipboarddata(const std::string& value);
  void set_clipboarddata(std::string&& value);
  void set_clipboarddata(const char* value);
  void set_clipboarddata(const char* value, size_t size);
  std::string* mutable_clipboarddata();
  std::string* release_clipboarddata();
  void set_allocated_clipboarddata(std::string* clipboarddata);
  private:
  const std::string& _internal_clipboarddata() const;
  void _internal_set_clipboarddata(const std::string& value);
  std::string* _internal_mutable_clipboarddata();
  public:

  // @@protoc_insertion_point(class_scope:hid.ClipboardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clipboarddata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyInjector_2eproto;
};
// -------------------------------------------------------------------

class ClipboardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hid.ClipboardResponse) */ {
 public:
  inline ClipboardResponse() : ClipboardResponse(nullptr) {}
  virtual ~ClipboardResponse();

  ClipboardResponse(const ClipboardResponse& from);
  ClipboardResponse(ClipboardResponse&& from) noexcept
    : ClipboardResponse() {
    *this = ::std::move(from);
  }

  inline ClipboardResponse& operator=(const ClipboardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipboardResponse& operator=(ClipboardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClipboardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClipboardResponse* internal_default_instance() {
    return reinterpret_cast<const ClipboardResponse*>(
               &_ClipboardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClipboardResponse& a, ClipboardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipboardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClipboardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClipboardResponse* New() const final {
    return CreateMaybeMessage<ClipboardResponse>(nullptr);
  }

  ClipboardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClipboardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClipboardResponse& from);
  void MergeFrom(const ClipboardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipboardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hid.ClipboardResponse";
  }
  protected:
  explicit ClipboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MyInjector_2eproto);
    return ::descriptor_table_MyInjector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplyFieldNumber = 1,
  };
  // string reply = 1;
  void clear_reply();
  const std::string& reply() const;
  void set_reply(const std::string& value);
  void set_reply(std::string&& value);
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  std::string* mutable_reply();
  std::string* release_reply();
  void set_allocated_reply(std::string* reply);
  private:
  const std::string& _internal_reply() const;
  void _internal_set_reply(const std::string& value);
  std::string* _internal_mutable_reply();
  public:

  // @@protoc_insertion_point(class_scope:hid.ClipboardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reply_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MyInjector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MouseRequest

// .hid.MouseRequest.ProceedType proceedtype = 1;
inline void MouseRequest::clear_proceedtype() {
  proceedtype_ = 0;
}
inline ::hid::MouseRequest_ProceedType MouseRequest::_internal_proceedtype() const {
  return static_cast< ::hid::MouseRequest_ProceedType >(proceedtype_);
}
inline ::hid::MouseRequest_ProceedType MouseRequest::proceedtype() const {
  // @@protoc_insertion_point(field_get:hid.MouseRequest.proceedtype)
  return _internal_proceedtype();
}
inline void MouseRequest::_internal_set_proceedtype(::hid::MouseRequest_ProceedType value) {
  
  proceedtype_ = value;
}
inline void MouseRequest::set_proceedtype(::hid::MouseRequest_ProceedType value) {
  _internal_set_proceedtype(value);
  // @@protoc_insertion_point(field_set:hid.MouseRequest.proceedtype)
}

// .hid.MouseRequest.ButtonType buttontype = 2;
inline void MouseRequest::clear_buttontype() {
  buttontype_ = 0;
}
inline ::hid::MouseRequest_ButtonType MouseRequest::_internal_buttontype() const {
  return static_cast< ::hid::MouseRequest_ButtonType >(buttontype_);
}
inline ::hid::MouseRequest_ButtonType MouseRequest::buttontype() const {
  // @@protoc_insertion_point(field_get:hid.MouseRequest.buttontype)
  return _internal_buttontype();
}
inline void MouseRequest::_internal_set_buttontype(::hid::MouseRequest_ButtonType value) {
  
  buttontype_ = value;
}
inline void MouseRequest::set_buttontype(::hid::MouseRequest_ButtonType value) {
  _internal_set_buttontype(value);
  // @@protoc_insertion_point(field_set:hid.MouseRequest.buttontype)
}

// sint64 location = 3;
inline void MouseRequest::clear_location() {
  location_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MouseRequest::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MouseRequest::location() const {
  // @@protoc_insertion_point(field_get:hid.MouseRequest.location)
  return _internal_location();
}
inline void MouseRequest::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  location_ = value;
}
inline void MouseRequest::set_location(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:hid.MouseRequest.location)
}

// -------------------------------------------------------------------

// MouseResponse

// bool isSame = 1;
inline void MouseResponse::clear_issame() {
  issame_ = false;
}
inline bool MouseResponse::_internal_issame() const {
  return issame_;
}
inline bool MouseResponse::issame() const {
  // @@protoc_insertion_point(field_get:hid.MouseResponse.isSame)
  return _internal_issame();
}
inline void MouseResponse::_internal_set_issame(bool value) {
  
  issame_ = value;
}
inline void MouseResponse::set_issame(bool value) {
  _internal_set_issame(value);
  // @@protoc_insertion_point(field_set:hid.MouseResponse.isSame)
}

// uint32 width = 2;
inline void MouseResponse::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::width() const {
  // @@protoc_insertion_point(field_get:hid.MouseResponse.width)
  return _internal_width();
}
inline void MouseResponse::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void MouseResponse::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:hid.MouseResponse.width)
}

// uint32 height = 3;
inline void MouseResponse::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::height() const {
  // @@protoc_insertion_point(field_get:hid.MouseResponse.height)
  return _internal_height();
}
inline void MouseResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void MouseResponse::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:hid.MouseResponse.height)
}

// uint32 xHotspot = 4;
inline void MouseResponse::clear_xhotspot() {
  xhotspot_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::_internal_xhotspot() const {
  return xhotspot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::xhotspot() const {
  // @@protoc_insertion_point(field_get:hid.MouseResponse.xHotspot)
  return _internal_xhotspot();
}
inline void MouseResponse::_internal_set_xhotspot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  xhotspot_ = value;
}
inline void MouseResponse::set_xhotspot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_xhotspot(value);
  // @@protoc_insertion_point(field_set:hid.MouseResponse.xHotspot)
}

// uint32 yHotspot = 5;
inline void MouseResponse::clear_yhotspot() {
  yhotspot_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::_internal_yhotspot() const {
  return yhotspot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::yhotspot() const {
  // @@protoc_insertion_point(field_get:hid.MouseResponse.yHotspot)
  return _internal_yhotspot();
}
inline void MouseResponse::_internal_set_yhotspot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  yhotspot_ = value;
}
inline void MouseResponse::set_yhotspot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_yhotspot(value);
  // @@protoc_insertion_point(field_set:hid.MouseResponse.yHotspot)
}

// uint32 cursorsize = 6;
inline void MouseResponse::clear_cursorsize() {
  cursorsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::_internal_cursorsize() const {
  return cursorsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MouseResponse::cursorsize() const {
  // @@protoc_insertion_point(field_get:hid.MouseResponse.cursorsize)
  return _internal_cursorsize();
}
inline void MouseResponse::_internal_set_cursorsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cursorsize_ = value;
}
inline void MouseResponse::set_cursorsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cursorsize(value);
  // @@protoc_insertion_point(field_set:hid.MouseResponse.cursorsize)
}

// bytes data = 7;
inline void MouseResponse::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MouseResponse::data() const {
  // @@protoc_insertion_point(field_get:hid.MouseResponse.data)
  return _internal_data();
}
inline void MouseResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:hid.MouseResponse.data)
}
inline std::string* MouseResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:hid.MouseResponse.data)
  return _internal_mutable_data();
}
inline const std::string& MouseResponse::_internal_data() const {
  return data_.Get();
}
inline void MouseResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MouseResponse::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hid.MouseResponse.data)
}
inline void MouseResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hid.MouseResponse.data)
}
inline void MouseResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hid.MouseResponse.data)
}
inline std::string* MouseResponse::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MouseResponse::release_data() {
  // @@protoc_insertion_point(field_release:hid.MouseResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MouseResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hid.MouseResponse.data)
}

// -------------------------------------------------------------------

// KeyboardRequest

// sint32 keycode = 1;
inline void KeyboardRequest::clear_keycode() {
  keycode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyboardRequest::_internal_keycode() const {
  return keycode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyboardRequest::keycode() const {
  // @@protoc_insertion_point(field_get:hid.KeyboardRequest.keycode)
  return _internal_keycode();
}
inline void KeyboardRequest::_internal_set_keycode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keycode_ = value;
}
inline void KeyboardRequest::set_keycode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keycode(value);
  // @@protoc_insertion_point(field_set:hid.KeyboardRequest.keycode)
}

// sint32 extend = 2;
inline void KeyboardRequest::clear_extend() {
  extend_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyboardRequest::_internal_extend() const {
  return extend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyboardRequest::extend() const {
  // @@protoc_insertion_point(field_get:hid.KeyboardRequest.extend)
  return _internal_extend();
}
inline void KeyboardRequest::_internal_set_extend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extend_ = value;
}
inline void KeyboardRequest::set_extend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extend(value);
  // @@protoc_insertion_point(field_set:hid.KeyboardRequest.extend)
}

// -------------------------------------------------------------------

// KeyboardResponse

// string reply = 1;
inline void KeyboardResponse::clear_reply() {
  reply_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyboardResponse::reply() const {
  // @@protoc_insertion_point(field_get:hid.KeyboardResponse.reply)
  return _internal_reply();
}
inline void KeyboardResponse::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:hid.KeyboardResponse.reply)
}
inline std::string* KeyboardResponse::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:hid.KeyboardResponse.reply)
  return _internal_mutable_reply();
}
inline const std::string& KeyboardResponse::_internal_reply() const {
  return reply_.Get();
}
inline void KeyboardResponse::_internal_set_reply(const std::string& value) {
  
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyboardResponse::set_reply(std::string&& value) {
  
  reply_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hid.KeyboardResponse.reply)
}
inline void KeyboardResponse::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hid.KeyboardResponse.reply)
}
inline void KeyboardResponse::set_reply(const char* value,
    size_t size) {
  
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hid.KeyboardResponse.reply)
}
inline std::string* KeyboardResponse::_internal_mutable_reply() {
  
  return reply_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyboardResponse::release_reply() {
  // @@protoc_insertion_point(field_release:hid.KeyboardResponse.reply)
  return reply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyboardResponse::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    
  } else {
    
  }
  reply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hid.KeyboardResponse.reply)
}

// -------------------------------------------------------------------

// ClipboardRequest

// string clipboardData = 1;
inline void ClipboardRequest::clear_clipboarddata() {
  clipboarddata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClipboardRequest::clipboarddata() const {
  // @@protoc_insertion_point(field_get:hid.ClipboardRequest.clipboardData)
  return _internal_clipboarddata();
}
inline void ClipboardRequest::set_clipboarddata(const std::string& value) {
  _internal_set_clipboarddata(value);
  // @@protoc_insertion_point(field_set:hid.ClipboardRequest.clipboardData)
}
inline std::string* ClipboardRequest::mutable_clipboarddata() {
  // @@protoc_insertion_point(field_mutable:hid.ClipboardRequest.clipboardData)
  return _internal_mutable_clipboarddata();
}
inline const std::string& ClipboardRequest::_internal_clipboarddata() const {
  return clipboarddata_.Get();
}
inline void ClipboardRequest::_internal_set_clipboarddata(const std::string& value) {
  
  clipboarddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClipboardRequest::set_clipboarddata(std::string&& value) {
  
  clipboarddata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hid.ClipboardRequest.clipboardData)
}
inline void ClipboardRequest::set_clipboarddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clipboarddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hid.ClipboardRequest.clipboardData)
}
inline void ClipboardRequest::set_clipboarddata(const char* value,
    size_t size) {
  
  clipboarddata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hid.ClipboardRequest.clipboardData)
}
inline std::string* ClipboardRequest::_internal_mutable_clipboarddata() {
  
  return clipboarddata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClipboardRequest::release_clipboarddata() {
  // @@protoc_insertion_point(field_release:hid.ClipboardRequest.clipboardData)
  return clipboarddata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClipboardRequest::set_allocated_clipboarddata(std::string* clipboarddata) {
  if (clipboarddata != nullptr) {
    
  } else {
    
  }
  clipboarddata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clipboarddata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hid.ClipboardRequest.clipboardData)
}

// -------------------------------------------------------------------

// ClipboardResponse

// string reply = 1;
inline void ClipboardResponse::clear_reply() {
  reply_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClipboardResponse::reply() const {
  // @@protoc_insertion_point(field_get:hid.ClipboardResponse.reply)
  return _internal_reply();
}
inline void ClipboardResponse::set_reply(const std::string& value) {
  _internal_set_reply(value);
  // @@protoc_insertion_point(field_set:hid.ClipboardResponse.reply)
}
inline std::string* ClipboardResponse::mutable_reply() {
  // @@protoc_insertion_point(field_mutable:hid.ClipboardResponse.reply)
  return _internal_mutable_reply();
}
inline const std::string& ClipboardResponse::_internal_reply() const {
  return reply_.Get();
}
inline void ClipboardResponse::_internal_set_reply(const std::string& value) {
  
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClipboardResponse::set_reply(std::string&& value) {
  
  reply_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hid.ClipboardResponse.reply)
}
inline void ClipboardResponse::set_reply(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hid.ClipboardResponse.reply)
}
inline void ClipboardResponse::set_reply(const char* value,
    size_t size) {
  
  reply_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hid.ClipboardResponse.reply)
}
inline std::string* ClipboardResponse::_internal_mutable_reply() {
  
  return reply_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClipboardResponse::release_reply() {
  // @@protoc_insertion_point(field_release:hid.ClipboardResponse.reply)
  return reply_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClipboardResponse::set_allocated_reply(std::string* reply) {
  if (reply != nullptr) {
    
  } else {
    
  }
  reply_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reply,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hid.ClipboardResponse.reply)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hid

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hid::MouseRequest_ProceedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hid::MouseRequest_ProceedType>() {
  return ::hid::MouseRequest_ProceedType_descriptor();
}
template <> struct is_proto_enum< ::hid::MouseRequest_ButtonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hid::MouseRequest_ButtonType>() {
  return ::hid::MouseRequest_ButtonType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MyInjector_2eproto
