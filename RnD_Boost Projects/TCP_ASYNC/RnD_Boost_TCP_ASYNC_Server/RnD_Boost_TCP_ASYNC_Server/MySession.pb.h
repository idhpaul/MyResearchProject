// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MySession.proto
#define PROTOBUF_USE_DLLS
#ifndef GOOGLE_PROTOBUF_INCLUDED_MySession_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MySession_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MySession_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MySession_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MySession_2eproto;
namespace My_Net {
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionMessageCreate;
class SessionMessageCreateDefaultTypeInternal;
extern SessionMessageCreateDefaultTypeInternal _SessionMessageCreate_default_instance_;
class SessionMessageDelete;
class SessionMessageDeleteDefaultTypeInternal;
extern SessionMessageDeleteDefaultTypeInternal _SessionMessageDelete_default_instance_;
class SessionMessageIdentified;
class SessionMessageIdentifiedDefaultTypeInternal;
extern SessionMessageIdentifiedDefaultTypeInternal _SessionMessageIdentified_default_instance_;
class SessionMessageInit;
class SessionMessageInitDefaultTypeInternal;
extern SessionMessageInitDefaultTypeInternal _SessionMessageInit_default_instance_;
class SessionMessageReset;
class SessionMessageResetDefaultTypeInternal;
extern SessionMessageResetDefaultTypeInternal _SessionMessageReset_default_instance_;
class SessionMessageStart;
class SessionMessageStartDefaultTypeInternal;
extern SessionMessageStartDefaultTypeInternal _SessionMessageStart_default_instance_;
class SessionMessageStop;
class SessionMessageStopDefaultTypeInternal;
extern SessionMessageStopDefaultTypeInternal _SessionMessageStop_default_instance_;
}  // namespace My_Net
PROTOBUF_NAMESPACE_OPEN
template<> ::My_Net::Session* Arena::CreateMaybeMessage<::My_Net::Session>(Arena*);
template<> ::My_Net::SessionMessageCreate* Arena::CreateMaybeMessage<::My_Net::SessionMessageCreate>(Arena*);
template<> ::My_Net::SessionMessageDelete* Arena::CreateMaybeMessage<::My_Net::SessionMessageDelete>(Arena*);
template<> ::My_Net::SessionMessageIdentified* Arena::CreateMaybeMessage<::My_Net::SessionMessageIdentified>(Arena*);
template<> ::My_Net::SessionMessageInit* Arena::CreateMaybeMessage<::My_Net::SessionMessageInit>(Arena*);
template<> ::My_Net::SessionMessageReset* Arena::CreateMaybeMessage<::My_Net::SessionMessageReset>(Arena*);
template<> ::My_Net::SessionMessageStart* Arena::CreateMaybeMessage<::My_Net::SessionMessageStart>(Arena*);
template<> ::My_Net::SessionMessageStop* Arena::CreateMaybeMessage<::My_Net::SessionMessageStop>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace My_Net {

// ===================================================================

class Session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:My_Net.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  virtual ~Session();

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(nullptr);
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "My_Net.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MySession_2eproto);
    return ::descriptor_table_MySession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kUserAgentFieldNumber = 2,
    kContentTypeFieldNumber = 7,
    kMessageFieldNumber = 15,
    kDateFieldNumber = 13,
    kContentLengthFieldNumber = 14,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string user_agent = 2;
  void clear_user_agent();
  const std::string& user_agent() const;
  void set_user_agent(const std::string& value);
  void set_user_agent(std::string&& value);
  void set_user_agent(const char* value);
  void set_user_agent(const char* value, size_t size);
  std::string* mutable_user_agent();
  std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);
  private:
  const std::string& _internal_user_agent() const;
  void _internal_set_user_agent(const std::string& value);
  std::string* _internal_mutable_user_agent();
  public:

  // string content_type = 7;
  void clear_content_type();
  const std::string& content_type() const;
  void set_content_type(const std::string& value);
  void set_content_type(std::string&& value);
  void set_content_type(const char* value);
  void set_content_type(const char* value, size_t size);
  std::string* mutable_content_type();
  std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // string message = 15;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp date = 13;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date();
  void set_allocated_date(PROTOBUF_NAMESPACE_ID::Timestamp* date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date();

  // int32 content_length = 14;
  void clear_content_length();
  ::PROTOBUF_NAMESPACE_ID::int32 content_length() const;
  void set_content_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_content_length() const;
  void _internal_set_content_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:My_Net.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  PROTOBUF_NAMESPACE_ID::Timestamp* date_;
  ::PROTOBUF_NAMESPACE_ID::int32 content_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MySession_2eproto;
};
// -------------------------------------------------------------------

class SessionMessageInit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:My_Net.SessionMessageInit) */ {
 public:
  inline SessionMessageInit() : SessionMessageInit(nullptr) {}
  virtual ~SessionMessageInit();

  SessionMessageInit(const SessionMessageInit& from);
  SessionMessageInit(SessionMessageInit&& from) noexcept
    : SessionMessageInit() {
    *this = ::std::move(from);
  }

  inline SessionMessageInit& operator=(const SessionMessageInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionMessageInit& operator=(SessionMessageInit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionMessageInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionMessageInit* internal_default_instance() {
    return reinterpret_cast<const SessionMessageInit*>(
               &_SessionMessageInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionMessageInit& a, SessionMessageInit& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionMessageInit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionMessageInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionMessageInit* New() const final {
    return CreateMaybeMessage<SessionMessageInit>(nullptr);
  }

  SessionMessageInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionMessageInit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionMessageInit& from);
  void MergeFrom(const SessionMessageInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionMessageInit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "My_Net.SessionMessageInit";
  }
  protected:
  explicit SessionMessageInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MySession_2eproto);
    return ::descriptor_table_MySession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 1,
  };
  // string session_key = 1;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);
  private:
  const std::string& _internal_session_key() const;
  void _internal_set_session_key(const std::string& value);
  std::string* _internal_mutable_session_key();
  public:

  // @@protoc_insertion_point(class_scope:My_Net.SessionMessageInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MySession_2eproto;
};
// -------------------------------------------------------------------

class SessionMessageIdentified PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:My_Net.SessionMessageIdentified) */ {
 public:
  inline SessionMessageIdentified() : SessionMessageIdentified(nullptr) {}
  virtual ~SessionMessageIdentified();

  SessionMessageIdentified(const SessionMessageIdentified& from);
  SessionMessageIdentified(SessionMessageIdentified&& from) noexcept
    : SessionMessageIdentified() {
    *this = ::std::move(from);
  }

  inline SessionMessageIdentified& operator=(const SessionMessageIdentified& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionMessageIdentified& operator=(SessionMessageIdentified&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionMessageIdentified& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionMessageIdentified* internal_default_instance() {
    return reinterpret_cast<const SessionMessageIdentified*>(
               &_SessionMessageIdentified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionMessageIdentified& a, SessionMessageIdentified& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionMessageIdentified* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionMessageIdentified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionMessageIdentified* New() const final {
    return CreateMaybeMessage<SessionMessageIdentified>(nullptr);
  }

  SessionMessageIdentified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionMessageIdentified>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionMessageIdentified& from);
  void MergeFrom(const SessionMessageIdentified& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionMessageIdentified* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "My_Net.SessionMessageIdentified";
  }
  protected:
  explicit SessionMessageIdentified(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MySession_2eproto);
    return ::descriptor_table_MySession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuInfoFieldNumber = 1,
    kResInfoFieldNumber = 2,
    kMemInfoFieldNumber = 3,
    kNetInfoFieldNumber = 4,
    kBandwidthFieldNumber = 5,
  };
  // string cpu_info = 1;
  void clear_cpu_info();
  const std::string& cpu_info() const;
  void set_cpu_info(const std::string& value);
  void set_cpu_info(std::string&& value);
  void set_cpu_info(const char* value);
  void set_cpu_info(const char* value, size_t size);
  std::string* mutable_cpu_info();
  std::string* release_cpu_info();
  void set_allocated_cpu_info(std::string* cpu_info);
  private:
  const std::string& _internal_cpu_info() const;
  void _internal_set_cpu_info(const std::string& value);
  std::string* _internal_mutable_cpu_info();
  public:

  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  void set_res_info(const std::string& value);
  void set_res_info(std::string&& value);
  void set_res_info(const char* value);
  void set_res_info(const char* value, size_t size);
  std::string* mutable_res_info();
  std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // string mem_info = 3;
  void clear_mem_info();
  const std::string& mem_info() const;
  void set_mem_info(const std::string& value);
  void set_mem_info(std::string&& value);
  void set_mem_info(const char* value);
  void set_mem_info(const char* value, size_t size);
  std::string* mutable_mem_info();
  std::string* release_mem_info();
  void set_allocated_mem_info(std::string* mem_info);
  private:
  const std::string& _internal_mem_info() const;
  void _internal_set_mem_info(const std::string& value);
  std::string* _internal_mutable_mem_info();
  public:

  // string net_info = 4;
  void clear_net_info();
  const std::string& net_info() const;
  void set_net_info(const std::string& value);
  void set_net_info(std::string&& value);
  void set_net_info(const char* value);
  void set_net_info(const char* value, size_t size);
  std::string* mutable_net_info();
  std::string* release_net_info();
  void set_allocated_net_info(std::string* net_info);
  private:
  const std::string& _internal_net_info() const;
  void _internal_set_net_info(const std::string& value);
  std::string* _internal_mutable_net_info();
  public:

  // string bandwidth = 5;
  void clear_bandwidth();
  const std::string& bandwidth() const;
  void set_bandwidth(const std::string& value);
  void set_bandwidth(std::string&& value);
  void set_bandwidth(const char* value);
  void set_bandwidth(const char* value, size_t size);
  std::string* mutable_bandwidth();
  std::string* release_bandwidth();
  void set_allocated_bandwidth(std::string* bandwidth);
  private:
  const std::string& _internal_bandwidth() const;
  void _internal_set_bandwidth(const std::string& value);
  std::string* _internal_mutable_bandwidth();
  public:

  // @@protoc_insertion_point(class_scope:My_Net.SessionMessageIdentified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mem_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MySession_2eproto;
};
// -------------------------------------------------------------------

class SessionMessageCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:My_Net.SessionMessageCreate) */ {
 public:
  inline SessionMessageCreate() : SessionMessageCreate(nullptr) {}
  virtual ~SessionMessageCreate();

  SessionMessageCreate(const SessionMessageCreate& from);
  SessionMessageCreate(SessionMessageCreate&& from) noexcept
    : SessionMessageCreate() {
    *this = ::std::move(from);
  }

  inline SessionMessageCreate& operator=(const SessionMessageCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionMessageCreate& operator=(SessionMessageCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionMessageCreate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionMessageCreate* internal_default_instance() {
    return reinterpret_cast<const SessionMessageCreate*>(
               &_SessionMessageCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SessionMessageCreate& a, SessionMessageCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionMessageCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionMessageCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionMessageCreate* New() const final {
    return CreateMaybeMessage<SessionMessageCreate>(nullptr);
  }

  SessionMessageCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionMessageCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionMessageCreate& from);
  void MergeFrom(const SessionMessageCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionMessageCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "My_Net.SessionMessageCreate";
  }
  protected:
  explicit SessionMessageCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MySession_2eproto);
    return ::descriptor_table_MySession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVCodecInfoFieldNumber = 1,
    kVBrcInfoFieldNumber = 2,
    kVBitrateInfoFieldNumber = 3,
    kVGopInfoFieldNumber = 4,
    kASamplerateFieldNumber = 5,
    kAQuantizationFieldNumber = 6,
  };
  // string v_codec_info = 1;
  void clear_v_codec_info();
  const std::string& v_codec_info() const;
  void set_v_codec_info(const std::string& value);
  void set_v_codec_info(std::string&& value);
  void set_v_codec_info(const char* value);
  void set_v_codec_info(const char* value, size_t size);
  std::string* mutable_v_codec_info();
  std::string* release_v_codec_info();
  void set_allocated_v_codec_info(std::string* v_codec_info);
  private:
  const std::string& _internal_v_codec_info() const;
  void _internal_set_v_codec_info(const std::string& value);
  std::string* _internal_mutable_v_codec_info();
  public:

  // string v_brc_info = 2;
  void clear_v_brc_info();
  const std::string& v_brc_info() const;
  void set_v_brc_info(const std::string& value);
  void set_v_brc_info(std::string&& value);
  void set_v_brc_info(const char* value);
  void set_v_brc_info(const char* value, size_t size);
  std::string* mutable_v_brc_info();
  std::string* release_v_brc_info();
  void set_allocated_v_brc_info(std::string* v_brc_info);
  private:
  const std::string& _internal_v_brc_info() const;
  void _internal_set_v_brc_info(const std::string& value);
  std::string* _internal_mutable_v_brc_info();
  public:

  // string v_bitrate_info = 3;
  void clear_v_bitrate_info();
  const std::string& v_bitrate_info() const;
  void set_v_bitrate_info(const std::string& value);
  void set_v_bitrate_info(std::string&& value);
  void set_v_bitrate_info(const char* value);
  void set_v_bitrate_info(const char* value, size_t size);
  std::string* mutable_v_bitrate_info();
  std::string* release_v_bitrate_info();
  void set_allocated_v_bitrate_info(std::string* v_bitrate_info);
  private:
  const std::string& _internal_v_bitrate_info() const;
  void _internal_set_v_bitrate_info(const std::string& value);
  std::string* _internal_mutable_v_bitrate_info();
  public:

  // string v_gop_info = 4;
  void clear_v_gop_info();
  const std::string& v_gop_info() const;
  void set_v_gop_info(const std::string& value);
  void set_v_gop_info(std::string&& value);
  void set_v_gop_info(const char* value);
  void set_v_gop_info(const char* value, size_t size);
  std::string* mutable_v_gop_info();
  std::string* release_v_gop_info();
  void set_allocated_v_gop_info(std::string* v_gop_info);
  private:
  const std::string& _internal_v_gop_info() const;
  void _internal_set_v_gop_info(const std::string& value);
  std::string* _internal_mutable_v_gop_info();
  public:

  // string a_samplerate = 5;
  void clear_a_samplerate();
  const std::string& a_samplerate() const;
  void set_a_samplerate(const std::string& value);
  void set_a_samplerate(std::string&& value);
  void set_a_samplerate(const char* value);
  void set_a_samplerate(const char* value, size_t size);
  std::string* mutable_a_samplerate();
  std::string* release_a_samplerate();
  void set_allocated_a_samplerate(std::string* a_samplerate);
  private:
  const std::string& _internal_a_samplerate() const;
  void _internal_set_a_samplerate(const std::string& value);
  std::string* _internal_mutable_a_samplerate();
  public:

  // string a_quantization = 6;
  void clear_a_quantization();
  const std::string& a_quantization() const;
  void set_a_quantization(const std::string& value);
  void set_a_quantization(std::string&& value);
  void set_a_quantization(const char* value);
  void set_a_quantization(const char* value, size_t size);
  std::string* mutable_a_quantization();
  std::string* release_a_quantization();
  void set_allocated_a_quantization(std::string* a_quantization);
  private:
  const std::string& _internal_a_quantization() const;
  void _internal_set_a_quantization(const std::string& value);
  std::string* _internal_mutable_a_quantization();
  public:

  // @@protoc_insertion_point(class_scope:My_Net.SessionMessageCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_codec_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_brc_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_bitrate_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr v_gop_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_samplerate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_quantization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MySession_2eproto;
};
// -------------------------------------------------------------------

class SessionMessageDelete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:My_Net.SessionMessageDelete) */ {
 public:
  inline SessionMessageDelete() : SessionMessageDelete(nullptr) {}
  virtual ~SessionMessageDelete();

  SessionMessageDelete(const SessionMessageDelete& from);
  SessionMessageDelete(SessionMessageDelete&& from) noexcept
    : SessionMessageDelete() {
    *this = ::std::move(from);
  }

  inline SessionMessageDelete& operator=(const SessionMessageDelete& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionMessageDelete& operator=(SessionMessageDelete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionMessageDelete& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionMessageDelete* internal_default_instance() {
    return reinterpret_cast<const SessionMessageDelete*>(
               &_SessionMessageDelete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SessionMessageDelete& a, SessionMessageDelete& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionMessageDelete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionMessageDelete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionMessageDelete* New() const final {
    return CreateMaybeMessage<SessionMessageDelete>(nullptr);
  }

  SessionMessageDelete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionMessageDelete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionMessageDelete& from);
  void MergeFrom(const SessionMessageDelete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionMessageDelete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "My_Net.SessionMessageDelete";
  }
  protected:
  explicit SessionMessageDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MySession_2eproto);
    return ::descriptor_table_MySession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageTimeFieldNumber = 1,
  };
  // string usage_time = 1;
  void clear_usage_time();
  const std::string& usage_time() const;
  void set_usage_time(const std::string& value);
  void set_usage_time(std::string&& value);
  void set_usage_time(const char* value);
  void set_usage_time(const char* value, size_t size);
  std::string* mutable_usage_time();
  std::string* release_usage_time();
  void set_allocated_usage_time(std::string* usage_time);
  private:
  const std::string& _internal_usage_time() const;
  void _internal_set_usage_time(const std::string& value);
  std::string* _internal_mutable_usage_time();
  public:

  // @@protoc_insertion_point(class_scope:My_Net.SessionMessageDelete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usage_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MySession_2eproto;
};
// -------------------------------------------------------------------

class SessionMessageStart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:My_Net.SessionMessageStart) */ {
 public:
  inline SessionMessageStart() : SessionMessageStart(nullptr) {}
  virtual ~SessionMessageStart();

  SessionMessageStart(const SessionMessageStart& from);
  SessionMessageStart(SessionMessageStart&& from) noexcept
    : SessionMessageStart() {
    *this = ::std::move(from);
  }

  inline SessionMessageStart& operator=(const SessionMessageStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionMessageStart& operator=(SessionMessageStart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionMessageStart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionMessageStart* internal_default_instance() {
    return reinterpret_cast<const SessionMessageStart*>(
               &_SessionMessageStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SessionMessageStart& a, SessionMessageStart& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionMessageStart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionMessageStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionMessageStart* New() const final {
    return CreateMaybeMessage<SessionMessageStart>(nullptr);
  }

  SessionMessageStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionMessageStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionMessageStart& from);
  void MergeFrom(const SessionMessageStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionMessageStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "My_Net.SessionMessageStart";
  }
  protected:
  explicit SessionMessageStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MySession_2eproto);
    return ::descriptor_table_MySession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastSateFieldNumber = 1,
  };
  // string last_sate = 1;
  void clear_last_sate();
  const std::string& last_sate() const;
  void set_last_sate(const std::string& value);
  void set_last_sate(std::string&& value);
  void set_last_sate(const char* value);
  void set_last_sate(const char* value, size_t size);
  std::string* mutable_last_sate();
  std::string* release_last_sate();
  void set_allocated_last_sate(std::string* last_sate);
  private:
  const std::string& _internal_last_sate() const;
  void _internal_set_last_sate(const std::string& value);
  std::string* _internal_mutable_last_sate();
  public:

  // @@protoc_insertion_point(class_scope:My_Net.SessionMessageStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_sate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MySession_2eproto;
};
// -------------------------------------------------------------------

class SessionMessageStop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:My_Net.SessionMessageStop) */ {
 public:
  inline SessionMessageStop() : SessionMessageStop(nullptr) {}
  virtual ~SessionMessageStop();

  SessionMessageStop(const SessionMessageStop& from);
  SessionMessageStop(SessionMessageStop&& from) noexcept
    : SessionMessageStop() {
    *this = ::std::move(from);
  }

  inline SessionMessageStop& operator=(const SessionMessageStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionMessageStop& operator=(SessionMessageStop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionMessageStop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionMessageStop* internal_default_instance() {
    return reinterpret_cast<const SessionMessageStop*>(
               &_SessionMessageStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SessionMessageStop& a, SessionMessageStop& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionMessageStop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionMessageStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionMessageStop* New() const final {
    return CreateMaybeMessage<SessionMessageStop>(nullptr);
  }

  SessionMessageStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionMessageStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionMessageStop& from);
  void MergeFrom(const SessionMessageStop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionMessageStop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "My_Net.SessionMessageStop";
  }
  protected:
  explicit SessionMessageStop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MySession_2eproto);
    return ::descriptor_table_MySession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastSateFieldNumber = 1,
  };
  // string last_sate = 1;
  void clear_last_sate();
  const std::string& last_sate() const;
  void set_last_sate(const std::string& value);
  void set_last_sate(std::string&& value);
  void set_last_sate(const char* value);
  void set_last_sate(const char* value, size_t size);
  std::string* mutable_last_sate();
  std::string* release_last_sate();
  void set_allocated_last_sate(std::string* last_sate);
  private:
  const std::string& _internal_last_sate() const;
  void _internal_set_last_sate(const std::string& value);
  std::string* _internal_mutable_last_sate();
  public:

  // @@protoc_insertion_point(class_scope:My_Net.SessionMessageStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_sate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MySession_2eproto;
};
// -------------------------------------------------------------------

class SessionMessageReset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:My_Net.SessionMessageReset) */ {
 public:
  inline SessionMessageReset() : SessionMessageReset(nullptr) {}
  virtual ~SessionMessageReset();

  SessionMessageReset(const SessionMessageReset& from);
  SessionMessageReset(SessionMessageReset&& from) noexcept
    : SessionMessageReset() {
    *this = ::std::move(from);
  }

  inline SessionMessageReset& operator=(const SessionMessageReset& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionMessageReset& operator=(SessionMessageReset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionMessageReset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionMessageReset* internal_default_instance() {
    return reinterpret_cast<const SessionMessageReset*>(
               &_SessionMessageReset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SessionMessageReset& a, SessionMessageReset& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionMessageReset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionMessageReset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionMessageReset* New() const final {
    return CreateMaybeMessage<SessionMessageReset>(nullptr);
  }

  SessionMessageReset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionMessageReset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionMessageReset& from);
  void MergeFrom(const SessionMessageReset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionMessageReset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "My_Net.SessionMessageReset";
  }
  protected:
  explicit SessionMessageReset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MySession_2eproto);
    return ::descriptor_table_MySession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResetVCodecInfoFieldNumber = 1,
    kResetVBrcInfoFieldNumber = 2,
    kResetVBitrateInfoFieldNumber = 3,
    kResetVGopInfoFieldNumber = 4,
    kResetASamplerateFieldNumber = 5,
    kResetAQuantizationFieldNumber = 6,
  };
  // string reset_v_codec_info = 1;
  void clear_reset_v_codec_info();
  const std::string& reset_v_codec_info() const;
  void set_reset_v_codec_info(const std::string& value);
  void set_reset_v_codec_info(std::string&& value);
  void set_reset_v_codec_info(const char* value);
  void set_reset_v_codec_info(const char* value, size_t size);
  std::string* mutable_reset_v_codec_info();
  std::string* release_reset_v_codec_info();
  void set_allocated_reset_v_codec_info(std::string* reset_v_codec_info);
  private:
  const std::string& _internal_reset_v_codec_info() const;
  void _internal_set_reset_v_codec_info(const std::string& value);
  std::string* _internal_mutable_reset_v_codec_info();
  public:

  // string reset_v_brc_info = 2;
  void clear_reset_v_brc_info();
  const std::string& reset_v_brc_info() const;
  void set_reset_v_brc_info(const std::string& value);
  void set_reset_v_brc_info(std::string&& value);
  void set_reset_v_brc_info(const char* value);
  void set_reset_v_brc_info(const char* value, size_t size);
  std::string* mutable_reset_v_brc_info();
  std::string* release_reset_v_brc_info();
  void set_allocated_reset_v_brc_info(std::string* reset_v_brc_info);
  private:
  const std::string& _internal_reset_v_brc_info() const;
  void _internal_set_reset_v_brc_info(const std::string& value);
  std::string* _internal_mutable_reset_v_brc_info();
  public:

  // string reset_v_bitrate_info = 3;
  void clear_reset_v_bitrate_info();
  const std::string& reset_v_bitrate_info() const;
  void set_reset_v_bitrate_info(const std::string& value);
  void set_reset_v_bitrate_info(std::string&& value);
  void set_reset_v_bitrate_info(const char* value);
  void set_reset_v_bitrate_info(const char* value, size_t size);
  std::string* mutable_reset_v_bitrate_info();
  std::string* release_reset_v_bitrate_info();
  void set_allocated_reset_v_bitrate_info(std::string* reset_v_bitrate_info);
  private:
  const std::string& _internal_reset_v_bitrate_info() const;
  void _internal_set_reset_v_bitrate_info(const std::string& value);
  std::string* _internal_mutable_reset_v_bitrate_info();
  public:

  // string reset_v_gop_info = 4;
  void clear_reset_v_gop_info();
  const std::string& reset_v_gop_info() const;
  void set_reset_v_gop_info(const std::string& value);
  void set_reset_v_gop_info(std::string&& value);
  void set_reset_v_gop_info(const char* value);
  void set_reset_v_gop_info(const char* value, size_t size);
  std::string* mutable_reset_v_gop_info();
  std::string* release_reset_v_gop_info();
  void set_allocated_reset_v_gop_info(std::string* reset_v_gop_info);
  private:
  const std::string& _internal_reset_v_gop_info() const;
  void _internal_set_reset_v_gop_info(const std::string& value);
  std::string* _internal_mutable_reset_v_gop_info();
  public:

  // string reset_a_samplerate = 5;
  void clear_reset_a_samplerate();
  const std::string& reset_a_samplerate() const;
  void set_reset_a_samplerate(const std::string& value);
  void set_reset_a_samplerate(std::string&& value);
  void set_reset_a_samplerate(const char* value);
  void set_reset_a_samplerate(const char* value, size_t size);
  std::string* mutable_reset_a_samplerate();
  std::string* release_reset_a_samplerate();
  void set_allocated_reset_a_samplerate(std::string* reset_a_samplerate);
  private:
  const std::string& _internal_reset_a_samplerate() const;
  void _internal_set_reset_a_samplerate(const std::string& value);
  std::string* _internal_mutable_reset_a_samplerate();
  public:

  // string reset_a_quantization = 6;
  void clear_reset_a_quantization();
  const std::string& reset_a_quantization() const;
  void set_reset_a_quantization(const std::string& value);
  void set_reset_a_quantization(std::string&& value);
  void set_reset_a_quantization(const char* value);
  void set_reset_a_quantization(const char* value, size_t size);
  std::string* mutable_reset_a_quantization();
  std::string* release_reset_a_quantization();
  void set_allocated_reset_a_quantization(std::string* reset_a_quantization);
  private:
  const std::string& _internal_reset_a_quantization() const;
  void _internal_set_reset_a_quantization(const std::string& value);
  std::string* _internal_mutable_reset_a_quantization();
  public:

  // @@protoc_insertion_point(class_scope:My_Net.SessionMessageReset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reset_v_codec_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reset_v_brc_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reset_v_bitrate_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reset_v_gop_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reset_a_samplerate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reset_a_quantization_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MySession_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// string host = 1;
inline void Session::clear_host() {
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Session::host() const {
  // @@protoc_insertion_point(field_get:My_Net.Session.host)
  return _internal_host();
}
inline void Session::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:My_Net.Session.host)
}
inline std::string* Session::mutable_host() {
  // @@protoc_insertion_point(field_mutable:My_Net.Session.host)
  return _internal_mutable_host();
}
inline const std::string& Session::_internal_host() const {
  return host_.Get();
}
inline void Session::_internal_set_host(const std::string& value) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Session::set_host(std::string&& value) {
  
  host_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.Session.host)
}
inline void Session::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.Session.host)
}
inline void Session::set_host(const char* value,
    size_t size) {
  
  host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.Session.host)
}
inline std::string* Session::_internal_mutable_host() {
  
  return host_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Session::release_host() {
  // @@protoc_insertion_point(field_release:My_Net.Session.host)
  return host_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.Session.host)
}

// string user_agent = 2;
inline void Session::clear_user_agent() {
  user_agent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Session::user_agent() const {
  // @@protoc_insertion_point(field_get:My_Net.Session.user_agent)
  return _internal_user_agent();
}
inline void Session::set_user_agent(const std::string& value) {
  _internal_set_user_agent(value);
  // @@protoc_insertion_point(field_set:My_Net.Session.user_agent)
}
inline std::string* Session::mutable_user_agent() {
  // @@protoc_insertion_point(field_mutable:My_Net.Session.user_agent)
  return _internal_mutable_user_agent();
}
inline const std::string& Session::_internal_user_agent() const {
  return user_agent_.Get();
}
inline void Session::_internal_set_user_agent(const std::string& value) {
  
  user_agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Session::set_user_agent(std::string&& value) {
  
  user_agent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.Session.user_agent)
}
inline void Session::set_user_agent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.Session.user_agent)
}
inline void Session::set_user_agent(const char* value,
    size_t size) {
  
  user_agent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.Session.user_agent)
}
inline std::string* Session::_internal_mutable_user_agent() {
  
  return user_agent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Session::release_user_agent() {
  // @@protoc_insertion_point(field_release:My_Net.Session.user_agent)
  return user_agent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    
  } else {
    
  }
  user_agent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_agent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.Session.user_agent)
}

// string content_type = 7;
inline void Session::clear_content_type() {
  content_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Session::content_type() const {
  // @@protoc_insertion_point(field_get:My_Net.Session.content_type)
  return _internal_content_type();
}
inline void Session::set_content_type(const std::string& value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:My_Net.Session.content_type)
}
inline std::string* Session::mutable_content_type() {
  // @@protoc_insertion_point(field_mutable:My_Net.Session.content_type)
  return _internal_mutable_content_type();
}
inline const std::string& Session::_internal_content_type() const {
  return content_type_.Get();
}
inline void Session::_internal_set_content_type(const std::string& value) {
  
  content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Session::set_content_type(std::string&& value) {
  
  content_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.Session.content_type)
}
inline void Session::set_content_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.Session.content_type)
}
inline void Session::set_content_type(const char* value,
    size_t size) {
  
  content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.Session.content_type)
}
inline std::string* Session::_internal_mutable_content_type() {
  
  return content_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Session::release_content_type() {
  // @@protoc_insertion_point(field_release:My_Net.Session.content_type)
  return content_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.Session.content_type)
}

// .google.protobuf.Timestamp date = 13;
inline bool Session::_internal_has_date() const {
  return this != internal_default_instance() && date_ != nullptr;
}
inline bool Session::has_date() const {
  return _internal_has_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Session::_internal_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Session::date() const {
  // @@protoc_insertion_point(field_get:My_Net.Session.date)
  return _internal_date();
}
inline void Session::unsafe_arena_set_allocated_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  date_ = date;
  if (date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:My_Net.Session.date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::release_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_;
  date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:My_Net.Session.date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = date_;
  date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::_internal_mutable_date() {
  
  if (date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    date_ = p;
  }
  return date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Session::mutable_date() {
  // @@protoc_insertion_point(field_mutable:My_Net.Session.date)
  return _internal_mutable_date();
}
inline void Session::set_allocated_date(PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date)->GetArena();
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:My_Net.Session.date)
}

// int32 content_length = 14;
inline void Session::clear_content_length() {
  content_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Session::_internal_content_length() const {
  return content_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Session::content_length() const {
  // @@protoc_insertion_point(field_get:My_Net.Session.content_length)
  return _internal_content_length();
}
inline void Session::_internal_set_content_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  content_length_ = value;
}
inline void Session::set_content_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_content_length(value);
  // @@protoc_insertion_point(field_set:My_Net.Session.content_length)
}

// string message = 15;
inline void Session::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Session::message() const {
  // @@protoc_insertion_point(field_get:My_Net.Session.message)
  return _internal_message();
}
inline void Session::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:My_Net.Session.message)
}
inline std::string* Session::mutable_message() {
  // @@protoc_insertion_point(field_mutable:My_Net.Session.message)
  return _internal_mutable_message();
}
inline const std::string& Session::_internal_message() const {
  return message_.Get();
}
inline void Session::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Session::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.Session.message)
}
inline void Session::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.Session.message)
}
inline void Session::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.Session.message)
}
inline std::string* Session::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Session::release_message() {
  // @@protoc_insertion_point(field_release:My_Net.Session.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Session::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.Session.message)
}

// -------------------------------------------------------------------

// SessionMessageInit

// string session_key = 1;
inline void SessionMessageInit::clear_session_key() {
  session_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageInit::session_key() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageInit.session_key)
  return _internal_session_key();
}
inline void SessionMessageInit::set_session_key(const std::string& value) {
  _internal_set_session_key(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageInit.session_key)
}
inline std::string* SessionMessageInit::mutable_session_key() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageInit.session_key)
  return _internal_mutable_session_key();
}
inline const std::string& SessionMessageInit::_internal_session_key() const {
  return session_key_.Get();
}
inline void SessionMessageInit::_internal_set_session_key(const std::string& value) {
  
  session_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageInit::set_session_key(std::string&& value) {
  
  session_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageInit.session_key)
}
inline void SessionMessageInit::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageInit.session_key)
}
inline void SessionMessageInit::set_session_key(const char* value,
    size_t size) {
  
  session_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageInit.session_key)
}
inline std::string* SessionMessageInit::_internal_mutable_session_key() {
  
  return session_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageInit::release_session_key() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageInit.session_key)
  return session_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageInit::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    
  } else {
    
  }
  session_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageInit.session_key)
}

// -------------------------------------------------------------------

// SessionMessageIdentified

// string cpu_info = 1;
inline void SessionMessageIdentified::clear_cpu_info() {
  cpu_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageIdentified::cpu_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageIdentified.cpu_info)
  return _internal_cpu_info();
}
inline void SessionMessageIdentified::set_cpu_info(const std::string& value) {
  _internal_set_cpu_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageIdentified.cpu_info)
}
inline std::string* SessionMessageIdentified::mutable_cpu_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageIdentified.cpu_info)
  return _internal_mutable_cpu_info();
}
inline const std::string& SessionMessageIdentified::_internal_cpu_info() const {
  return cpu_info_.Get();
}
inline void SessionMessageIdentified::_internal_set_cpu_info(const std::string& value) {
  
  cpu_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageIdentified::set_cpu_info(std::string&& value) {
  
  cpu_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageIdentified.cpu_info)
}
inline void SessionMessageIdentified::set_cpu_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpu_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageIdentified.cpu_info)
}
inline void SessionMessageIdentified::set_cpu_info(const char* value,
    size_t size) {
  
  cpu_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageIdentified.cpu_info)
}
inline std::string* SessionMessageIdentified::_internal_mutable_cpu_info() {
  
  return cpu_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageIdentified::release_cpu_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageIdentified.cpu_info)
  return cpu_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageIdentified::set_allocated_cpu_info(std::string* cpu_info) {
  if (cpu_info != nullptr) {
    
  } else {
    
  }
  cpu_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageIdentified.cpu_info)
}

// string res_info = 2;
inline void SessionMessageIdentified::clear_res_info() {
  res_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageIdentified::res_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageIdentified.res_info)
  return _internal_res_info();
}
inline void SessionMessageIdentified::set_res_info(const std::string& value) {
  _internal_set_res_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageIdentified.res_info)
}
inline std::string* SessionMessageIdentified::mutable_res_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageIdentified.res_info)
  return _internal_mutable_res_info();
}
inline const std::string& SessionMessageIdentified::_internal_res_info() const {
  return res_info_.Get();
}
inline void SessionMessageIdentified::_internal_set_res_info(const std::string& value) {
  
  res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageIdentified::set_res_info(std::string&& value) {
  
  res_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageIdentified.res_info)
}
inline void SessionMessageIdentified::set_res_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageIdentified.res_info)
}
inline void SessionMessageIdentified::set_res_info(const char* value,
    size_t size) {
  
  res_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageIdentified.res_info)
}
inline std::string* SessionMessageIdentified::_internal_mutable_res_info() {
  
  return res_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageIdentified::release_res_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageIdentified.res_info)
  return res_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageIdentified::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  res_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageIdentified.res_info)
}

// string mem_info = 3;
inline void SessionMessageIdentified::clear_mem_info() {
  mem_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageIdentified::mem_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageIdentified.mem_info)
  return _internal_mem_info();
}
inline void SessionMessageIdentified::set_mem_info(const std::string& value) {
  _internal_set_mem_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageIdentified.mem_info)
}
inline std::string* SessionMessageIdentified::mutable_mem_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageIdentified.mem_info)
  return _internal_mutable_mem_info();
}
inline const std::string& SessionMessageIdentified::_internal_mem_info() const {
  return mem_info_.Get();
}
inline void SessionMessageIdentified::_internal_set_mem_info(const std::string& value) {
  
  mem_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageIdentified::set_mem_info(std::string&& value) {
  
  mem_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageIdentified.mem_info)
}
inline void SessionMessageIdentified::set_mem_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mem_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageIdentified.mem_info)
}
inline void SessionMessageIdentified::set_mem_info(const char* value,
    size_t size) {
  
  mem_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageIdentified.mem_info)
}
inline std::string* SessionMessageIdentified::_internal_mutable_mem_info() {
  
  return mem_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageIdentified::release_mem_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageIdentified.mem_info)
  return mem_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageIdentified::set_allocated_mem_info(std::string* mem_info) {
  if (mem_info != nullptr) {
    
  } else {
    
  }
  mem_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mem_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageIdentified.mem_info)
}

// string net_info = 4;
inline void SessionMessageIdentified::clear_net_info() {
  net_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageIdentified::net_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageIdentified.net_info)
  return _internal_net_info();
}
inline void SessionMessageIdentified::set_net_info(const std::string& value) {
  _internal_set_net_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageIdentified.net_info)
}
inline std::string* SessionMessageIdentified::mutable_net_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageIdentified.net_info)
  return _internal_mutable_net_info();
}
inline const std::string& SessionMessageIdentified::_internal_net_info() const {
  return net_info_.Get();
}
inline void SessionMessageIdentified::_internal_set_net_info(const std::string& value) {
  
  net_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageIdentified::set_net_info(std::string&& value) {
  
  net_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageIdentified.net_info)
}
inline void SessionMessageIdentified::set_net_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageIdentified.net_info)
}
inline void SessionMessageIdentified::set_net_info(const char* value,
    size_t size) {
  
  net_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageIdentified.net_info)
}
inline std::string* SessionMessageIdentified::_internal_mutable_net_info() {
  
  return net_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageIdentified::release_net_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageIdentified.net_info)
  return net_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageIdentified::set_allocated_net_info(std::string* net_info) {
  if (net_info != nullptr) {
    
  } else {
    
  }
  net_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageIdentified.net_info)
}

// string bandwidth = 5;
inline void SessionMessageIdentified::clear_bandwidth() {
  bandwidth_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageIdentified::bandwidth() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageIdentified.bandwidth)
  return _internal_bandwidth();
}
inline void SessionMessageIdentified::set_bandwidth(const std::string& value) {
  _internal_set_bandwidth(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageIdentified.bandwidth)
}
inline std::string* SessionMessageIdentified::mutable_bandwidth() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageIdentified.bandwidth)
  return _internal_mutable_bandwidth();
}
inline const std::string& SessionMessageIdentified::_internal_bandwidth() const {
  return bandwidth_.Get();
}
inline void SessionMessageIdentified::_internal_set_bandwidth(const std::string& value) {
  
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageIdentified::set_bandwidth(std::string&& value) {
  
  bandwidth_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageIdentified.bandwidth)
}
inline void SessionMessageIdentified::set_bandwidth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageIdentified.bandwidth)
}
inline void SessionMessageIdentified::set_bandwidth(const char* value,
    size_t size) {
  
  bandwidth_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageIdentified.bandwidth)
}
inline std::string* SessionMessageIdentified::_internal_mutable_bandwidth() {
  
  return bandwidth_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageIdentified::release_bandwidth() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageIdentified.bandwidth)
  return bandwidth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageIdentified::set_allocated_bandwidth(std::string* bandwidth) {
  if (bandwidth != nullptr) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageIdentified.bandwidth)
}

// -------------------------------------------------------------------

// SessionMessageCreate

// string v_codec_info = 1;
inline void SessionMessageCreate::clear_v_codec_info() {
  v_codec_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageCreate::v_codec_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageCreate.v_codec_info)
  return _internal_v_codec_info();
}
inline void SessionMessageCreate::set_v_codec_info(const std::string& value) {
  _internal_set_v_codec_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageCreate.v_codec_info)
}
inline std::string* SessionMessageCreate::mutable_v_codec_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageCreate.v_codec_info)
  return _internal_mutable_v_codec_info();
}
inline const std::string& SessionMessageCreate::_internal_v_codec_info() const {
  return v_codec_info_.Get();
}
inline void SessionMessageCreate::_internal_set_v_codec_info(const std::string& value) {
  
  v_codec_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageCreate::set_v_codec_info(std::string&& value) {
  
  v_codec_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageCreate.v_codec_info)
}
inline void SessionMessageCreate::set_v_codec_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_codec_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageCreate.v_codec_info)
}
inline void SessionMessageCreate::set_v_codec_info(const char* value,
    size_t size) {
  
  v_codec_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageCreate.v_codec_info)
}
inline std::string* SessionMessageCreate::_internal_mutable_v_codec_info() {
  
  return v_codec_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageCreate::release_v_codec_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageCreate.v_codec_info)
  return v_codec_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageCreate::set_allocated_v_codec_info(std::string* v_codec_info) {
  if (v_codec_info != nullptr) {
    
  } else {
    
  }
  v_codec_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_codec_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageCreate.v_codec_info)
}

// string v_brc_info = 2;
inline void SessionMessageCreate::clear_v_brc_info() {
  v_brc_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageCreate::v_brc_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageCreate.v_brc_info)
  return _internal_v_brc_info();
}
inline void SessionMessageCreate::set_v_brc_info(const std::string& value) {
  _internal_set_v_brc_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageCreate.v_brc_info)
}
inline std::string* SessionMessageCreate::mutable_v_brc_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageCreate.v_brc_info)
  return _internal_mutable_v_brc_info();
}
inline const std::string& SessionMessageCreate::_internal_v_brc_info() const {
  return v_brc_info_.Get();
}
inline void SessionMessageCreate::_internal_set_v_brc_info(const std::string& value) {
  
  v_brc_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageCreate::set_v_brc_info(std::string&& value) {
  
  v_brc_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageCreate.v_brc_info)
}
inline void SessionMessageCreate::set_v_brc_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_brc_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageCreate.v_brc_info)
}
inline void SessionMessageCreate::set_v_brc_info(const char* value,
    size_t size) {
  
  v_brc_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageCreate.v_brc_info)
}
inline std::string* SessionMessageCreate::_internal_mutable_v_brc_info() {
  
  return v_brc_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageCreate::release_v_brc_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageCreate.v_brc_info)
  return v_brc_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageCreate::set_allocated_v_brc_info(std::string* v_brc_info) {
  if (v_brc_info != nullptr) {
    
  } else {
    
  }
  v_brc_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_brc_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageCreate.v_brc_info)
}

// string v_bitrate_info = 3;
inline void SessionMessageCreate::clear_v_bitrate_info() {
  v_bitrate_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageCreate::v_bitrate_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageCreate.v_bitrate_info)
  return _internal_v_bitrate_info();
}
inline void SessionMessageCreate::set_v_bitrate_info(const std::string& value) {
  _internal_set_v_bitrate_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageCreate.v_bitrate_info)
}
inline std::string* SessionMessageCreate::mutable_v_bitrate_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageCreate.v_bitrate_info)
  return _internal_mutable_v_bitrate_info();
}
inline const std::string& SessionMessageCreate::_internal_v_bitrate_info() const {
  return v_bitrate_info_.Get();
}
inline void SessionMessageCreate::_internal_set_v_bitrate_info(const std::string& value) {
  
  v_bitrate_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageCreate::set_v_bitrate_info(std::string&& value) {
  
  v_bitrate_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageCreate.v_bitrate_info)
}
inline void SessionMessageCreate::set_v_bitrate_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_bitrate_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageCreate.v_bitrate_info)
}
inline void SessionMessageCreate::set_v_bitrate_info(const char* value,
    size_t size) {
  
  v_bitrate_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageCreate.v_bitrate_info)
}
inline std::string* SessionMessageCreate::_internal_mutable_v_bitrate_info() {
  
  return v_bitrate_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageCreate::release_v_bitrate_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageCreate.v_bitrate_info)
  return v_bitrate_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageCreate::set_allocated_v_bitrate_info(std::string* v_bitrate_info) {
  if (v_bitrate_info != nullptr) {
    
  } else {
    
  }
  v_bitrate_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_bitrate_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageCreate.v_bitrate_info)
}

// string v_gop_info = 4;
inline void SessionMessageCreate::clear_v_gop_info() {
  v_gop_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageCreate::v_gop_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageCreate.v_gop_info)
  return _internal_v_gop_info();
}
inline void SessionMessageCreate::set_v_gop_info(const std::string& value) {
  _internal_set_v_gop_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageCreate.v_gop_info)
}
inline std::string* SessionMessageCreate::mutable_v_gop_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageCreate.v_gop_info)
  return _internal_mutable_v_gop_info();
}
inline const std::string& SessionMessageCreate::_internal_v_gop_info() const {
  return v_gop_info_.Get();
}
inline void SessionMessageCreate::_internal_set_v_gop_info(const std::string& value) {
  
  v_gop_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageCreate::set_v_gop_info(std::string&& value) {
  
  v_gop_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageCreate.v_gop_info)
}
inline void SessionMessageCreate::set_v_gop_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v_gop_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageCreate.v_gop_info)
}
inline void SessionMessageCreate::set_v_gop_info(const char* value,
    size_t size) {
  
  v_gop_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageCreate.v_gop_info)
}
inline std::string* SessionMessageCreate::_internal_mutable_v_gop_info() {
  
  return v_gop_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageCreate::release_v_gop_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageCreate.v_gop_info)
  return v_gop_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageCreate::set_allocated_v_gop_info(std::string* v_gop_info) {
  if (v_gop_info != nullptr) {
    
  } else {
    
  }
  v_gop_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), v_gop_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageCreate.v_gop_info)
}

// string a_samplerate = 5;
inline void SessionMessageCreate::clear_a_samplerate() {
  a_samplerate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageCreate::a_samplerate() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageCreate.a_samplerate)
  return _internal_a_samplerate();
}
inline void SessionMessageCreate::set_a_samplerate(const std::string& value) {
  _internal_set_a_samplerate(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageCreate.a_samplerate)
}
inline std::string* SessionMessageCreate::mutable_a_samplerate() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageCreate.a_samplerate)
  return _internal_mutable_a_samplerate();
}
inline const std::string& SessionMessageCreate::_internal_a_samplerate() const {
  return a_samplerate_.Get();
}
inline void SessionMessageCreate::_internal_set_a_samplerate(const std::string& value) {
  
  a_samplerate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageCreate::set_a_samplerate(std::string&& value) {
  
  a_samplerate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageCreate.a_samplerate)
}
inline void SessionMessageCreate::set_a_samplerate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  a_samplerate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageCreate.a_samplerate)
}
inline void SessionMessageCreate::set_a_samplerate(const char* value,
    size_t size) {
  
  a_samplerate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageCreate.a_samplerate)
}
inline std::string* SessionMessageCreate::_internal_mutable_a_samplerate() {
  
  return a_samplerate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageCreate::release_a_samplerate() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageCreate.a_samplerate)
  return a_samplerate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageCreate::set_allocated_a_samplerate(std::string* a_samplerate) {
  if (a_samplerate != nullptr) {
    
  } else {
    
  }
  a_samplerate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a_samplerate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageCreate.a_samplerate)
}

// string a_quantization = 6;
inline void SessionMessageCreate::clear_a_quantization() {
  a_quantization_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageCreate::a_quantization() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageCreate.a_quantization)
  return _internal_a_quantization();
}
inline void SessionMessageCreate::set_a_quantization(const std::string& value) {
  _internal_set_a_quantization(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageCreate.a_quantization)
}
inline std::string* SessionMessageCreate::mutable_a_quantization() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageCreate.a_quantization)
  return _internal_mutable_a_quantization();
}
inline const std::string& SessionMessageCreate::_internal_a_quantization() const {
  return a_quantization_.Get();
}
inline void SessionMessageCreate::_internal_set_a_quantization(const std::string& value) {
  
  a_quantization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageCreate::set_a_quantization(std::string&& value) {
  
  a_quantization_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageCreate.a_quantization)
}
inline void SessionMessageCreate::set_a_quantization(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  a_quantization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageCreate.a_quantization)
}
inline void SessionMessageCreate::set_a_quantization(const char* value,
    size_t size) {
  
  a_quantization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageCreate.a_quantization)
}
inline std::string* SessionMessageCreate::_internal_mutable_a_quantization() {
  
  return a_quantization_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageCreate::release_a_quantization() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageCreate.a_quantization)
  return a_quantization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageCreate::set_allocated_a_quantization(std::string* a_quantization) {
  if (a_quantization != nullptr) {
    
  } else {
    
  }
  a_quantization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a_quantization,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageCreate.a_quantization)
}

// -------------------------------------------------------------------

// SessionMessageDelete

// string usage_time = 1;
inline void SessionMessageDelete::clear_usage_time() {
  usage_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageDelete::usage_time() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageDelete.usage_time)
  return _internal_usage_time();
}
inline void SessionMessageDelete::set_usage_time(const std::string& value) {
  _internal_set_usage_time(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageDelete.usage_time)
}
inline std::string* SessionMessageDelete::mutable_usage_time() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageDelete.usage_time)
  return _internal_mutable_usage_time();
}
inline const std::string& SessionMessageDelete::_internal_usage_time() const {
  return usage_time_.Get();
}
inline void SessionMessageDelete::_internal_set_usage_time(const std::string& value) {
  
  usage_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageDelete::set_usage_time(std::string&& value) {
  
  usage_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageDelete.usage_time)
}
inline void SessionMessageDelete::set_usage_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  usage_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageDelete.usage_time)
}
inline void SessionMessageDelete::set_usage_time(const char* value,
    size_t size) {
  
  usage_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageDelete.usage_time)
}
inline std::string* SessionMessageDelete::_internal_mutable_usage_time() {
  
  return usage_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageDelete::release_usage_time() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageDelete.usage_time)
  return usage_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageDelete::set_allocated_usage_time(std::string* usage_time) {
  if (usage_time != nullptr) {
    
  } else {
    
  }
  usage_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usage_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageDelete.usage_time)
}

// -------------------------------------------------------------------

// SessionMessageStart

// string last_sate = 1;
inline void SessionMessageStart::clear_last_sate() {
  last_sate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageStart::last_sate() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageStart.last_sate)
  return _internal_last_sate();
}
inline void SessionMessageStart::set_last_sate(const std::string& value) {
  _internal_set_last_sate(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageStart.last_sate)
}
inline std::string* SessionMessageStart::mutable_last_sate() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageStart.last_sate)
  return _internal_mutable_last_sate();
}
inline const std::string& SessionMessageStart::_internal_last_sate() const {
  return last_sate_.Get();
}
inline void SessionMessageStart::_internal_set_last_sate(const std::string& value) {
  
  last_sate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageStart::set_last_sate(std::string&& value) {
  
  last_sate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageStart.last_sate)
}
inline void SessionMessageStart::set_last_sate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_sate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageStart.last_sate)
}
inline void SessionMessageStart::set_last_sate(const char* value,
    size_t size) {
  
  last_sate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageStart.last_sate)
}
inline std::string* SessionMessageStart::_internal_mutable_last_sate() {
  
  return last_sate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageStart::release_last_sate() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageStart.last_sate)
  return last_sate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageStart::set_allocated_last_sate(std::string* last_sate) {
  if (last_sate != nullptr) {
    
  } else {
    
  }
  last_sate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_sate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageStart.last_sate)
}

// -------------------------------------------------------------------

// SessionMessageStop

// string last_sate = 1;
inline void SessionMessageStop::clear_last_sate() {
  last_sate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageStop::last_sate() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageStop.last_sate)
  return _internal_last_sate();
}
inline void SessionMessageStop::set_last_sate(const std::string& value) {
  _internal_set_last_sate(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageStop.last_sate)
}
inline std::string* SessionMessageStop::mutable_last_sate() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageStop.last_sate)
  return _internal_mutable_last_sate();
}
inline const std::string& SessionMessageStop::_internal_last_sate() const {
  return last_sate_.Get();
}
inline void SessionMessageStop::_internal_set_last_sate(const std::string& value) {
  
  last_sate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageStop::set_last_sate(std::string&& value) {
  
  last_sate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageStop.last_sate)
}
inline void SessionMessageStop::set_last_sate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_sate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageStop.last_sate)
}
inline void SessionMessageStop::set_last_sate(const char* value,
    size_t size) {
  
  last_sate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageStop.last_sate)
}
inline std::string* SessionMessageStop::_internal_mutable_last_sate() {
  
  return last_sate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageStop::release_last_sate() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageStop.last_sate)
  return last_sate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageStop::set_allocated_last_sate(std::string* last_sate) {
  if (last_sate != nullptr) {
    
  } else {
    
  }
  last_sate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_sate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageStop.last_sate)
}

// -------------------------------------------------------------------

// SessionMessageReset

// string reset_v_codec_info = 1;
inline void SessionMessageReset::clear_reset_v_codec_info() {
  reset_v_codec_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageReset::reset_v_codec_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageReset.reset_v_codec_info)
  return _internal_reset_v_codec_info();
}
inline void SessionMessageReset::set_reset_v_codec_info(const std::string& value) {
  _internal_set_reset_v_codec_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageReset.reset_v_codec_info)
}
inline std::string* SessionMessageReset::mutable_reset_v_codec_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageReset.reset_v_codec_info)
  return _internal_mutable_reset_v_codec_info();
}
inline const std::string& SessionMessageReset::_internal_reset_v_codec_info() const {
  return reset_v_codec_info_.Get();
}
inline void SessionMessageReset::_internal_set_reset_v_codec_info(const std::string& value) {
  
  reset_v_codec_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageReset::set_reset_v_codec_info(std::string&& value) {
  
  reset_v_codec_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageReset.reset_v_codec_info)
}
inline void SessionMessageReset::set_reset_v_codec_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reset_v_codec_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageReset.reset_v_codec_info)
}
inline void SessionMessageReset::set_reset_v_codec_info(const char* value,
    size_t size) {
  
  reset_v_codec_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageReset.reset_v_codec_info)
}
inline std::string* SessionMessageReset::_internal_mutable_reset_v_codec_info() {
  
  return reset_v_codec_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageReset::release_reset_v_codec_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageReset.reset_v_codec_info)
  return reset_v_codec_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageReset::set_allocated_reset_v_codec_info(std::string* reset_v_codec_info) {
  if (reset_v_codec_info != nullptr) {
    
  } else {
    
  }
  reset_v_codec_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reset_v_codec_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageReset.reset_v_codec_info)
}

// string reset_v_brc_info = 2;
inline void SessionMessageReset::clear_reset_v_brc_info() {
  reset_v_brc_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageReset::reset_v_brc_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageReset.reset_v_brc_info)
  return _internal_reset_v_brc_info();
}
inline void SessionMessageReset::set_reset_v_brc_info(const std::string& value) {
  _internal_set_reset_v_brc_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageReset.reset_v_brc_info)
}
inline std::string* SessionMessageReset::mutable_reset_v_brc_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageReset.reset_v_brc_info)
  return _internal_mutable_reset_v_brc_info();
}
inline const std::string& SessionMessageReset::_internal_reset_v_brc_info() const {
  return reset_v_brc_info_.Get();
}
inline void SessionMessageReset::_internal_set_reset_v_brc_info(const std::string& value) {
  
  reset_v_brc_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageReset::set_reset_v_brc_info(std::string&& value) {
  
  reset_v_brc_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageReset.reset_v_brc_info)
}
inline void SessionMessageReset::set_reset_v_brc_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reset_v_brc_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageReset.reset_v_brc_info)
}
inline void SessionMessageReset::set_reset_v_brc_info(const char* value,
    size_t size) {
  
  reset_v_brc_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageReset.reset_v_brc_info)
}
inline std::string* SessionMessageReset::_internal_mutable_reset_v_brc_info() {
  
  return reset_v_brc_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageReset::release_reset_v_brc_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageReset.reset_v_brc_info)
  return reset_v_brc_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageReset::set_allocated_reset_v_brc_info(std::string* reset_v_brc_info) {
  if (reset_v_brc_info != nullptr) {
    
  } else {
    
  }
  reset_v_brc_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reset_v_brc_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageReset.reset_v_brc_info)
}

// string reset_v_bitrate_info = 3;
inline void SessionMessageReset::clear_reset_v_bitrate_info() {
  reset_v_bitrate_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageReset::reset_v_bitrate_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageReset.reset_v_bitrate_info)
  return _internal_reset_v_bitrate_info();
}
inline void SessionMessageReset::set_reset_v_bitrate_info(const std::string& value) {
  _internal_set_reset_v_bitrate_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageReset.reset_v_bitrate_info)
}
inline std::string* SessionMessageReset::mutable_reset_v_bitrate_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageReset.reset_v_bitrate_info)
  return _internal_mutable_reset_v_bitrate_info();
}
inline const std::string& SessionMessageReset::_internal_reset_v_bitrate_info() const {
  return reset_v_bitrate_info_.Get();
}
inline void SessionMessageReset::_internal_set_reset_v_bitrate_info(const std::string& value) {
  
  reset_v_bitrate_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageReset::set_reset_v_bitrate_info(std::string&& value) {
  
  reset_v_bitrate_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageReset.reset_v_bitrate_info)
}
inline void SessionMessageReset::set_reset_v_bitrate_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reset_v_bitrate_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageReset.reset_v_bitrate_info)
}
inline void SessionMessageReset::set_reset_v_bitrate_info(const char* value,
    size_t size) {
  
  reset_v_bitrate_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageReset.reset_v_bitrate_info)
}
inline std::string* SessionMessageReset::_internal_mutable_reset_v_bitrate_info() {
  
  return reset_v_bitrate_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageReset::release_reset_v_bitrate_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageReset.reset_v_bitrate_info)
  return reset_v_bitrate_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageReset::set_allocated_reset_v_bitrate_info(std::string* reset_v_bitrate_info) {
  if (reset_v_bitrate_info != nullptr) {
    
  } else {
    
  }
  reset_v_bitrate_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reset_v_bitrate_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageReset.reset_v_bitrate_info)
}

// string reset_v_gop_info = 4;
inline void SessionMessageReset::clear_reset_v_gop_info() {
  reset_v_gop_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageReset::reset_v_gop_info() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageReset.reset_v_gop_info)
  return _internal_reset_v_gop_info();
}
inline void SessionMessageReset::set_reset_v_gop_info(const std::string& value) {
  _internal_set_reset_v_gop_info(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageReset.reset_v_gop_info)
}
inline std::string* SessionMessageReset::mutable_reset_v_gop_info() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageReset.reset_v_gop_info)
  return _internal_mutable_reset_v_gop_info();
}
inline const std::string& SessionMessageReset::_internal_reset_v_gop_info() const {
  return reset_v_gop_info_.Get();
}
inline void SessionMessageReset::_internal_set_reset_v_gop_info(const std::string& value) {
  
  reset_v_gop_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageReset::set_reset_v_gop_info(std::string&& value) {
  
  reset_v_gop_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageReset.reset_v_gop_info)
}
inline void SessionMessageReset::set_reset_v_gop_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reset_v_gop_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageReset.reset_v_gop_info)
}
inline void SessionMessageReset::set_reset_v_gop_info(const char* value,
    size_t size) {
  
  reset_v_gop_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageReset.reset_v_gop_info)
}
inline std::string* SessionMessageReset::_internal_mutable_reset_v_gop_info() {
  
  return reset_v_gop_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageReset::release_reset_v_gop_info() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageReset.reset_v_gop_info)
  return reset_v_gop_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageReset::set_allocated_reset_v_gop_info(std::string* reset_v_gop_info) {
  if (reset_v_gop_info != nullptr) {
    
  } else {
    
  }
  reset_v_gop_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reset_v_gop_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageReset.reset_v_gop_info)
}

// string reset_a_samplerate = 5;
inline void SessionMessageReset::clear_reset_a_samplerate() {
  reset_a_samplerate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageReset::reset_a_samplerate() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageReset.reset_a_samplerate)
  return _internal_reset_a_samplerate();
}
inline void SessionMessageReset::set_reset_a_samplerate(const std::string& value) {
  _internal_set_reset_a_samplerate(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageReset.reset_a_samplerate)
}
inline std::string* SessionMessageReset::mutable_reset_a_samplerate() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageReset.reset_a_samplerate)
  return _internal_mutable_reset_a_samplerate();
}
inline const std::string& SessionMessageReset::_internal_reset_a_samplerate() const {
  return reset_a_samplerate_.Get();
}
inline void SessionMessageReset::_internal_set_reset_a_samplerate(const std::string& value) {
  
  reset_a_samplerate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageReset::set_reset_a_samplerate(std::string&& value) {
  
  reset_a_samplerate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageReset.reset_a_samplerate)
}
inline void SessionMessageReset::set_reset_a_samplerate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reset_a_samplerate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageReset.reset_a_samplerate)
}
inline void SessionMessageReset::set_reset_a_samplerate(const char* value,
    size_t size) {
  
  reset_a_samplerate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageReset.reset_a_samplerate)
}
inline std::string* SessionMessageReset::_internal_mutable_reset_a_samplerate() {
  
  return reset_a_samplerate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageReset::release_reset_a_samplerate() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageReset.reset_a_samplerate)
  return reset_a_samplerate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageReset::set_allocated_reset_a_samplerate(std::string* reset_a_samplerate) {
  if (reset_a_samplerate != nullptr) {
    
  } else {
    
  }
  reset_a_samplerate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reset_a_samplerate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageReset.reset_a_samplerate)
}

// string reset_a_quantization = 6;
inline void SessionMessageReset::clear_reset_a_quantization() {
  reset_a_quantization_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SessionMessageReset::reset_a_quantization() const {
  // @@protoc_insertion_point(field_get:My_Net.SessionMessageReset.reset_a_quantization)
  return _internal_reset_a_quantization();
}
inline void SessionMessageReset::set_reset_a_quantization(const std::string& value) {
  _internal_set_reset_a_quantization(value);
  // @@protoc_insertion_point(field_set:My_Net.SessionMessageReset.reset_a_quantization)
}
inline std::string* SessionMessageReset::mutable_reset_a_quantization() {
  // @@protoc_insertion_point(field_mutable:My_Net.SessionMessageReset.reset_a_quantization)
  return _internal_mutable_reset_a_quantization();
}
inline const std::string& SessionMessageReset::_internal_reset_a_quantization() const {
  return reset_a_quantization_.Get();
}
inline void SessionMessageReset::_internal_set_reset_a_quantization(const std::string& value) {
  
  reset_a_quantization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SessionMessageReset::set_reset_a_quantization(std::string&& value) {
  
  reset_a_quantization_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:My_Net.SessionMessageReset.reset_a_quantization)
}
inline void SessionMessageReset::set_reset_a_quantization(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reset_a_quantization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:My_Net.SessionMessageReset.reset_a_quantization)
}
inline void SessionMessageReset::set_reset_a_quantization(const char* value,
    size_t size) {
  
  reset_a_quantization_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:My_Net.SessionMessageReset.reset_a_quantization)
}
inline std::string* SessionMessageReset::_internal_mutable_reset_a_quantization() {
  
  return reset_a_quantization_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SessionMessageReset::release_reset_a_quantization() {
  // @@protoc_insertion_point(field_release:My_Net.SessionMessageReset.reset_a_quantization)
  return reset_a_quantization_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SessionMessageReset::set_allocated_reset_a_quantization(std::string* reset_a_quantization) {
  if (reset_a_quantization != nullptr) {
    
  } else {
    
  }
  reset_a_quantization_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reset_a_quantization,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:My_Net.SessionMessageReset.reset_a_quantization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace My_Net

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MySession_2eproto
